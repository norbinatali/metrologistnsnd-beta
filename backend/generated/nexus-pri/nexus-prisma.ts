/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Post: PostObject
      User: UserObject
      Device: DeviceObject
      TR: TRObject
      PostConnection: PostConnectionObject
      PageInfo: PageInfoObject
      PostEdge: PostEdgeObject
      AggregatePost: AggregatePostObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      DeviceConnection: DeviceConnectionObject
      DeviceEdge: DeviceEdgeObject
      AggregateDevice: AggregateDeviceObject
      TRConnection: TRConnectionObject
      TREdge: TREdgeObject
      AggregateTR: AggregateTRObject
      LetterEmail: LetterEmailObject
      LetterEmailConnection: LetterEmailConnectionObject
      LetterEmailEdge: LetterEmailEdgeObject
      AggregateLetterEmail: AggregateLetterEmailObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PostSubscriptionPayload: PostSubscriptionPayloadObject
      PostPreviousValues: PostPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      DeviceSubscriptionPayload: DeviceSubscriptionPayloadObject
      DevicePreviousValues: DevicePreviousValuesObject
      TRSubscriptionPayload: TRSubscriptionPayloadObject
      TRPreviousValues: TRPreviousValuesObject
      LetterEmailSubscriptionPayload: LetterEmailSubscriptionPayloadObject
      LetterEmailPreviousValues: LetterEmailPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Post: PostFieldDetails
      User: UserFieldDetails
      Device: DeviceFieldDetails
      TR: TRFieldDetails
      PostConnection: PostConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PostEdge: PostEdgeFieldDetails
      AggregatePost: AggregatePostFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      DeviceConnection: DeviceConnectionFieldDetails
      DeviceEdge: DeviceEdgeFieldDetails
      AggregateDevice: AggregateDeviceFieldDetails
      TRConnection: TRConnectionFieldDetails
      TREdge: TREdgeFieldDetails
      AggregateTR: AggregateTRFieldDetails
      LetterEmail: LetterEmailFieldDetails
      LetterEmailConnection: LetterEmailConnectionFieldDetails
      LetterEmailEdge: LetterEmailEdgeFieldDetails
      AggregateLetterEmail: AggregateLetterEmailFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PostSubscriptionPayload: PostSubscriptionPayloadFieldDetails
      PostPreviousValues: PostPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      DeviceSubscriptionPayload: DeviceSubscriptionPayloadFieldDetails
      DevicePreviousValues: DevicePreviousValuesFieldDetails
      TRSubscriptionPayload: TRSubscriptionPayloadFieldDetails
      TRPreviousValues: TRPreviousValuesFieldDetails
      LetterEmailSubscriptionPayload: LetterEmailSubscriptionPayloadFieldDetails
      LetterEmailPreviousValues: LetterEmailPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PostWhereUniqueInput: PostWhereUniqueInputInputObject
      PostWhereInput: PostWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      DeviceWhereInput: DeviceWhereInputInputObject
      TRWhereInput: TRWhereInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      DeviceWhereUniqueInput: DeviceWhereUniqueInputInputObject
      TRWhereUniqueInput: TRWhereUniqueInputInputObject
      LetterEmailWhereUniqueInput: LetterEmailWhereUniqueInputInputObject
      LetterEmailWhereInput: LetterEmailWhereInputInputObject
      PostCreateInput: PostCreateInputInputObject
      UserCreateOneWithoutPostsInput: UserCreateOneWithoutPostsInputInputObject
      UserCreateWithoutPostsInput: UserCreateWithoutPostsInputInputObject
      DeviceCreateManyWithoutAuthorInput: DeviceCreateManyWithoutAuthorInputInputObject
      DeviceCreateWithoutAuthorInput: DeviceCreateWithoutAuthorInputInputObject
      TRCreateOneWithoutDevice_idInput: TRCreateOneWithoutDevice_idInputInputObject
      TRCreateWithoutDevice_idInput: TRCreateWithoutDevice_idInputInputObject
      PostUpdateInput: PostUpdateInputInputObject
      UserUpdateOneRequiredWithoutPostsInput: UserUpdateOneRequiredWithoutPostsInputInputObject
      UserUpdateWithoutPostsDataInput: UserUpdateWithoutPostsDataInputInputObject
      DeviceUpdateManyWithoutAuthorInput: DeviceUpdateManyWithoutAuthorInputInputObject
      DeviceUpdateWithWhereUniqueWithoutAuthorInput: DeviceUpdateWithWhereUniqueWithoutAuthorInputInputObject
      DeviceUpdateWithoutAuthorDataInput: DeviceUpdateWithoutAuthorDataInputInputObject
      TRUpdateOneRequiredWithoutDevice_idInput: TRUpdateOneRequiredWithoutDevice_idInputInputObject
      TRUpdateWithoutDevice_idDataInput: TRUpdateWithoutDevice_idDataInputInputObject
      TRUpsertWithoutDevice_idInput: TRUpsertWithoutDevice_idInputInputObject
      DeviceUpsertWithWhereUniqueWithoutAuthorInput: DeviceUpsertWithWhereUniqueWithoutAuthorInputInputObject
      DeviceScalarWhereInput: DeviceScalarWhereInputInputObject
      DeviceUpdateManyWithWhereNestedInput: DeviceUpdateManyWithWhereNestedInputInputObject
      DeviceUpdateManyDataInput: DeviceUpdateManyDataInputInputObject
      UserUpsertWithoutPostsInput: UserUpsertWithoutPostsInputInputObject
      PostUpdateManyMutationInput: PostUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      PostCreateManyWithoutAuthorInput: PostCreateManyWithoutAuthorInputInputObject
      PostCreateWithoutAuthorInput: PostCreateWithoutAuthorInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      PostUpdateManyWithoutAuthorInput: PostUpdateManyWithoutAuthorInputInputObject
      PostUpdateWithWhereUniqueWithoutAuthorInput: PostUpdateWithWhereUniqueWithoutAuthorInputInputObject
      PostUpdateWithoutAuthorDataInput: PostUpdateWithoutAuthorDataInputInputObject
      PostUpsertWithWhereUniqueWithoutAuthorInput: PostUpsertWithWhereUniqueWithoutAuthorInputInputObject
      PostScalarWhereInput: PostScalarWhereInputInputObject
      PostUpdateManyWithWhereNestedInput: PostUpdateManyWithWhereNestedInputInputObject
      PostUpdateManyDataInput: PostUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      DeviceCreateInput: DeviceCreateInputInputObject
      UserCreateOneWithoutDevicesInput: UserCreateOneWithoutDevicesInputInputObject
      UserCreateWithoutDevicesInput: UserCreateWithoutDevicesInputInputObject
      DeviceUpdateInput: DeviceUpdateInputInputObject
      UserUpdateOneRequiredWithoutDevicesInput: UserUpdateOneRequiredWithoutDevicesInputInputObject
      UserUpdateWithoutDevicesDataInput: UserUpdateWithoutDevicesDataInputInputObject
      UserUpsertWithoutDevicesInput: UserUpsertWithoutDevicesInputInputObject
      DeviceUpdateManyMutationInput: DeviceUpdateManyMutationInputInputObject
      TRCreateInput: TRCreateInputInputObject
      DeviceCreateManyWithoutTrInput: DeviceCreateManyWithoutTrInputInputObject
      DeviceCreateWithoutTrInput: DeviceCreateWithoutTrInputInputObject
      TRUpdateInput: TRUpdateInputInputObject
      DeviceUpdateManyWithoutTrInput: DeviceUpdateManyWithoutTrInputInputObject
      DeviceUpdateWithWhereUniqueWithoutTrInput: DeviceUpdateWithWhereUniqueWithoutTrInputInputObject
      DeviceUpdateWithoutTrDataInput: DeviceUpdateWithoutTrDataInputInputObject
      DeviceUpsertWithWhereUniqueWithoutTrInput: DeviceUpsertWithWhereUniqueWithoutTrInputInputObject
      TRUpdateManyMutationInput: TRUpdateManyMutationInputInputObject
      LetterEmailCreateInput: LetterEmailCreateInputInputObject
      LetterEmailUpdateInput: LetterEmailUpdateInputInputObject
      LetterEmailUpdateManyMutationInput: LetterEmailUpdateManyMutationInputInputObject
      PostSubscriptionWhereInput: PostSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      DeviceSubscriptionWhereInput: DeviceSubscriptionWhereInputInputObject
      TRSubscriptionWhereInput: TRSubscriptionWhereInputInputObject
      LetterEmailSubscriptionWhereInput: LetterEmailSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    Role: RoleValues,
    PostOrderByInput: PostOrderByInputValues,
    DeviceOrderByInput: DeviceOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    TROrderByInput: TROrderByInputValues,
    LetterEmailOrderByInput: LetterEmailOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'post', args?: QueryPostArgs[] | false, alias?: string  } 
  | { name: 'posts', args?: QueryPostsArgs[] | false, alias?: string  } 
  | { name: 'postsConnection', args?: QueryPostsConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'device', args?: QueryDeviceArgs[] | false, alias?: string  } 
  | { name: 'devices', args?: QueryDevicesArgs[] | false, alias?: string  } 
  | { name: 'devicesConnection', args?: QueryDevicesConnectionArgs[] | false, alias?: string  } 
  | { name: 'tR', args?: QueryTRArgs[] | false, alias?: string  } 
  | { name: 'tRs', args?: QueryTRsArgs[] | false, alias?: string  } 
  | { name: 'tRsConnection', args?: QueryTRsConnectionArgs[] | false, alias?: string  } 
  | { name: 'letterEmail', args?: QueryLetterEmailArgs[] | false, alias?: string  } 
  | { name: 'letterEmails', args?: QueryLetterEmailsArgs[] | false, alias?: string  } 
  | { name: 'letterEmailsConnection', args?: QueryLetterEmailsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'post'
  | 'posts'
  | 'postsConnection'
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'device'
  | 'devices'
  | 'devicesConnection'
  | 'tR'
  | 'tRs'
  | 'tRsConnection'
  | 'letterEmail'
  | 'letterEmails'
  | 'letterEmailsConnection'


type QueryPostArgs =
  | 'where'
type QueryPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPostsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDeviceArgs =
  | 'where'
type QueryDevicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDevicesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTRArgs =
  | 'where'
type QueryTRsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTRsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLetterEmailArgs =
  | 'where'
type QueryLetterEmailsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLetterEmailsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  post: {
    type: 'Post'
    args: Record<QueryPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  posts: {
    type: 'Post'
    args: Record<QueryPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  postsConnection: {
    type: 'PostConnection'
    args: Record<QueryPostsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostConnection> | prisma.PostConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  device: {
    type: 'Device'
    args: Record<QueryDeviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DeviceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device | null> | prisma.Device | null
  }
  devices: {
    type: 'Device'
    args: Record<QueryDevicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DeviceWhereInput | null, orderBy?: prisma.DeviceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device[]> | prisma.Device[]
  }
  devicesConnection: {
    type: 'DeviceConnection'
    args: Record<QueryDevicesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DeviceWhereInput | null, orderBy?: prisma.DeviceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DeviceConnection> | prisma.DeviceConnection
  }
  tR: {
    type: 'TR'
    args: Record<QueryTRArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TRWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TR | null> | prisma.TR | null
  }
  tRs: {
    type: 'TR'
    args: Record<QueryTRsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TRWhereInput | null, orderBy?: prisma.TROrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TR[]> | prisma.TR[]
  }
  tRsConnection: {
    type: 'TRConnection'
    args: Record<QueryTRsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TRWhereInput | null, orderBy?: prisma.TROrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TRConnection> | prisma.TRConnection
  }
  letterEmail: {
    type: 'LetterEmail'
    args: Record<QueryLetterEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LetterEmailWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmail | null> | prisma.LetterEmail | null
  }
  letterEmails: {
    type: 'LetterEmail'
    args: Record<QueryLetterEmailsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LetterEmailWhereInput | null, orderBy?: prisma.LetterEmailOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmail[]> | prisma.LetterEmail[]
  }
  letterEmailsConnection: {
    type: 'LetterEmailConnection'
    args: Record<QueryLetterEmailsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LetterEmailWhereInput | null, orderBy?: prisma.LetterEmailOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmailConnection> | prisma.LetterEmailConnection
  }
}
  

// Types for Post

type PostObject =
  | PostFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 

type PostFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'published'
  | 'title'
  | 'content'
  | 'author'



  

export interface PostFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Post">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'companyName', args?: [] | false, alias?: string  } 
  | { name: 'posts', args?: UserPostsArgs[] | false, alias?: string  } 
  | { name: 'devices', args?: UserDevicesArgs[] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'resetToken', args?: [] | false, alias?: string  } 
  | { name: 'resetExpires', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'password'
  | 'name'
  | 'companyName'
  | 'posts'
  | 'devices'
  | 'role'
  | 'resetToken'
  | 'resetExpires'


type UserPostsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserDevicesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  companyName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  posts: {
    type: 'Post'
    args: Record<UserPostsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: PostWhereInput | null, orderBy?: prisma.PostOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post[]> | prisma.Post[]
  }
  devices: {
    type: 'Device'
    args: Record<UserDevicesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: DeviceWhereInput | null, orderBy?: prisma.DeviceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device[]> | prisma.Device[]
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  resetToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  resetExpires: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for Device

type DeviceObject =
  | DeviceFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'name_EN', args?: [] | false, alias?: string  } 
  | { name: 'name_UA', args?: [] | false, alias?: string  } 
  | { name: 'name_RUS', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'module', args?: [] | false, alias?: string  } 
  | { name: 'tr', args?: [] | false, alias?: string  } 
  | { name: 'author', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type DeviceFields =
  | 'id'
  | 'published'
  | 'name_EN'
  | 'name_UA'
  | 'name_RUS'
  | 'category'
  | 'module'
  | 'tr'
  | 'author'
  | 'createdAt'
  | 'updatedAt'



  

export interface DeviceFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_EN: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_UA: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_RUS: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  module: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  tr: {
    type: 'TR'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Device">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TR> | prisma.TR
  }
  author: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Device">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TR

type TRObject =
  | TRFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name_TR_UA', args?: [] | false, alias?: string  } 
  | { name: 'name_TR_EN', args?: [] | false, alias?: string  } 
  | { name: 'device_id', args?: TRDevice_idArgs[] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TRFields =
  | 'id'
  | 'name_TR_UA'
  | 'name_TR_EN'
  | 'device_id'
  | 'createdAt'
  | 'updatedAt'


type TRDevice_idArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface TRFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_TR_UA: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_TR_EN: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  device_id: {
    type: 'Device'
    args: Record<TRDevice_idArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TR">,
      args: { where?: DeviceWhereInput | null, orderBy?: prisma.DeviceOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device[]> | prisma.Device[]
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PostConnection

type PostConnectionObject =
  | PostConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PostConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PostConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PostEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostEdge[]> | prisma.PostEdge[]
  }
  aggregate: {
    type: 'AggregatePost'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePost> | prisma.AggregatePost
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PostEdge

type PostEdgeObject =
  | PostEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PostEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PostEdgeFieldDetails {
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePost

type AggregatePostObject =
  | AggregatePostFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePostFields =
  | 'count'



  

export interface AggregatePostFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DeviceConnection

type DeviceConnectionObject =
  | DeviceConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DeviceConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DeviceConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DeviceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DeviceEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DeviceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DeviceEdge[]> | prisma.DeviceEdge[]
  }
  aggregate: {
    type: 'AggregateDevice'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DeviceConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDevice> | prisma.AggregateDevice
  }
}
  

// Types for DeviceEdge

type DeviceEdgeObject =
  | DeviceEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DeviceEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DeviceEdgeFieldDetails {
  node: {
    type: 'Device'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DeviceEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device> | prisma.Device
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDevice

type AggregateDeviceObject =
  | AggregateDeviceFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDeviceFields =
  | 'count'



  

export interface AggregateDeviceFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TRConnection

type TRConnectionObject =
  | TRConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TRConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TRConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TRConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TREdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TRConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TREdge[]> | prisma.TREdge[]
  }
  aggregate: {
    type: 'AggregateTR'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TRConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTR> | prisma.AggregateTR
  }
}
  

// Types for TREdge

type TREdgeObject =
  | TREdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TREdgeFields =
  | 'node'
  | 'cursor'



  

export interface TREdgeFieldDetails {
  node: {
    type: 'TR'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TREdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TR> | prisma.TR
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTR

type AggregateTRObject =
  | AggregateTRFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTRFields =
  | 'count'



  

export interface AggregateTRFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LetterEmail

type LetterEmailObject =
  | LetterEmailFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'from', args?: [] | false, alias?: string  } 
  | { name: 'subject', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 

type LetterEmailFields =
  | 'id'
  | 'from'
  | 'subject'
  | 'text'



  

export interface LetterEmailFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  from: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subject: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LetterEmailConnection

type LetterEmailConnectionObject =
  | LetterEmailConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LetterEmailConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LetterEmailConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LetterEmailConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LetterEmailEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LetterEmailConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmailEdge[]> | prisma.LetterEmailEdge[]
  }
  aggregate: {
    type: 'AggregateLetterEmail'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LetterEmailConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLetterEmail> | prisma.AggregateLetterEmail
  }
}
  

// Types for LetterEmailEdge

type LetterEmailEdgeObject =
  | LetterEmailEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LetterEmailEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LetterEmailEdgeFieldDetails {
  node: {
    type: 'LetterEmail'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LetterEmailEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmail> | prisma.LetterEmail
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLetterEmail

type AggregateLetterEmailObject =
  | AggregateLetterEmailFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLetterEmailFields =
  | 'count'



  

export interface AggregateLetterEmailFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPost', args?: MutationCreatePostArgs[] | false, alias?: string  } 
  | { name: 'updatePost', args?: MutationUpdatePostArgs[] | false, alias?: string  } 
  | { name: 'updateManyPosts', args?: MutationUpdateManyPostsArgs[] | false, alias?: string  } 
  | { name: 'upsertPost', args?: MutationUpsertPostArgs[] | false, alias?: string  } 
  | { name: 'deletePost', args?: MutationDeletePostArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPosts', args?: MutationDeleteManyPostsArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createDevice', args?: MutationCreateDeviceArgs[] | false, alias?: string  } 
  | { name: 'updateDevice', args?: MutationUpdateDeviceArgs[] | false, alias?: string  } 
  | { name: 'updateManyDevices', args?: MutationUpdateManyDevicesArgs[] | false, alias?: string  } 
  | { name: 'upsertDevice', args?: MutationUpsertDeviceArgs[] | false, alias?: string  } 
  | { name: 'deleteDevice', args?: MutationDeleteDeviceArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDevices', args?: MutationDeleteManyDevicesArgs[] | false, alias?: string  } 
  | { name: 'createTR', args?: MutationCreateTRArgs[] | false, alias?: string  } 
  | { name: 'updateTR', args?: MutationUpdateTRArgs[] | false, alias?: string  } 
  | { name: 'updateManyTRs', args?: MutationUpdateManyTRsArgs[] | false, alias?: string  } 
  | { name: 'upsertTR', args?: MutationUpsertTRArgs[] | false, alias?: string  } 
  | { name: 'deleteTR', args?: MutationDeleteTRArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTRs', args?: MutationDeleteManyTRsArgs[] | false, alias?: string  } 
  | { name: 'createLetterEmail', args?: MutationCreateLetterEmailArgs[] | false, alias?: string  } 
  | { name: 'updateLetterEmail', args?: MutationUpdateLetterEmailArgs[] | false, alias?: string  } 
  | { name: 'updateManyLetterEmails', args?: MutationUpdateManyLetterEmailsArgs[] | false, alias?: string  } 
  | { name: 'upsertLetterEmail', args?: MutationUpsertLetterEmailArgs[] | false, alias?: string  } 
  | { name: 'deleteLetterEmail', args?: MutationDeleteLetterEmailArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLetterEmails', args?: MutationDeleteManyLetterEmailsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPost'
  | 'updatePost'
  | 'updateManyPosts'
  | 'upsertPost'
  | 'deletePost'
  | 'deleteManyPosts'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createDevice'
  | 'updateDevice'
  | 'updateManyDevices'
  | 'upsertDevice'
  | 'deleteDevice'
  | 'deleteManyDevices'
  | 'createTR'
  | 'updateTR'
  | 'updateManyTRs'
  | 'upsertTR'
  | 'deleteTR'
  | 'deleteManyTRs'
  | 'createLetterEmail'
  | 'updateLetterEmail'
  | 'updateManyLetterEmails'
  | 'upsertLetterEmail'
  | 'deleteLetterEmail'
  | 'deleteManyLetterEmails'


type MutationCreatePostArgs =
  | 'data'
type MutationUpdatePostArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPostsArgs =
  | 'data'
  | 'where'
type MutationUpsertPostArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePostArgs =
  | 'where'
type MutationDeleteManyPostsArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateDeviceArgs =
  | 'data'
type MutationUpdateDeviceArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDevicesArgs =
  | 'data'
  | 'where'
type MutationUpsertDeviceArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDeviceArgs =
  | 'where'
type MutationDeleteManyDevicesArgs =
  | 'where'
type MutationCreateTRArgs =
  | 'data'
type MutationUpdateTRArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTRsArgs =
  | 'data'
  | 'where'
type MutationUpsertTRArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTRArgs =
  | 'where'
type MutationDeleteManyTRsArgs =
  | 'where'
type MutationCreateLetterEmailArgs =
  | 'data'
type MutationUpdateLetterEmailArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLetterEmailsArgs =
  | 'data'
  | 'where'
type MutationUpsertLetterEmailArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLetterEmailArgs =
  | 'where'
type MutationDeleteManyLetterEmailsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPost: {
    type: 'Post'
    args: Record<MutationCreatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  updatePost: {
    type: 'Post'
    args: Record<MutationUpdatePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateInput, where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updateManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PostUpdateManyMutationInput, where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPost: {
    type: 'Post'
    args: Record<MutationUpsertPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post> | prisma.Post
  }
  deletePost: {
    type: 'Post'
    args: Record<MutationDeletePostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PostWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  deleteManyPosts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPostsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PostWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDevice: {
    type: 'Device'
    args: Record<MutationCreateDeviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DeviceCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device> | prisma.Device
  }
  updateDevice: {
    type: 'Device'
    args: Record<MutationUpdateDeviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DeviceUpdateInput, where: DeviceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device | null> | prisma.Device | null
  }
  updateManyDevices: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDevicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DeviceUpdateManyMutationInput, where?: DeviceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDevice: {
    type: 'Device'
    args: Record<MutationUpsertDeviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DeviceWhereUniqueInput, create: DeviceCreateInput, update: DeviceUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device> | prisma.Device
  }
  deleteDevice: {
    type: 'Device'
    args: Record<MutationDeleteDeviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DeviceWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device | null> | prisma.Device | null
  }
  deleteManyDevices: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDevicesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DeviceWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTR: {
    type: 'TR'
    args: Record<MutationCreateTRArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TRCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TR> | prisma.TR
  }
  updateTR: {
    type: 'TR'
    args: Record<MutationUpdateTRArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TRUpdateInput, where: TRWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TR | null> | prisma.TR | null
  }
  updateManyTRs: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTRsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TRUpdateManyMutationInput, where?: TRWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTR: {
    type: 'TR'
    args: Record<MutationUpsertTRArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TRWhereUniqueInput, create: TRCreateInput, update: TRUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TR> | prisma.TR
  }
  deleteTR: {
    type: 'TR'
    args: Record<MutationDeleteTRArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TRWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TR | null> | prisma.TR | null
  }
  deleteManyTRs: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTRsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TRWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLetterEmail: {
    type: 'LetterEmail'
    args: Record<MutationCreateLetterEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LetterEmailCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmail> | prisma.LetterEmail
  }
  updateLetterEmail: {
    type: 'LetterEmail'
    args: Record<MutationUpdateLetterEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LetterEmailUpdateInput, where: LetterEmailWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmail | null> | prisma.LetterEmail | null
  }
  updateManyLetterEmails: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLetterEmailsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LetterEmailUpdateManyMutationInput, where?: LetterEmailWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLetterEmail: {
    type: 'LetterEmail'
    args: Record<MutationUpsertLetterEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LetterEmailWhereUniqueInput, create: LetterEmailCreateInput, update: LetterEmailUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmail> | prisma.LetterEmail
  }
  deleteLetterEmail: {
    type: 'LetterEmail'
    args: Record<MutationDeleteLetterEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LetterEmailWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmail | null> | prisma.LetterEmail | null
  }
  deleteManyLetterEmails: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLetterEmailsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LetterEmailWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'post', args?: SubscriptionPostArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'device', args?: SubscriptionDeviceArgs[] | false, alias?: string  } 
  | { name: 'tR', args?: SubscriptionTRArgs[] | false, alias?: string  } 
  | { name: 'letterEmail', args?: SubscriptionLetterEmailArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'post'
  | 'user'
  | 'device'
  | 'tR'
  | 'letterEmail'


type SubscriptionPostArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
type SubscriptionDeviceArgs =
  | 'where'
type SubscriptionTRArgs =
  | 'where'
type SubscriptionLetterEmailArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  post: {
    type: 'PostSubscriptionPayload'
    args: Record<SubscriptionPostArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PostSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostSubscriptionPayload | null> | prisma.PostSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  device: {
    type: 'DeviceSubscriptionPayload'
    args: Record<SubscriptionDeviceArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DeviceSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DeviceSubscriptionPayload | null> | prisma.DeviceSubscriptionPayload | null
  }
  tR: {
    type: 'TRSubscriptionPayload'
    args: Record<SubscriptionTRArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TRSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TRSubscriptionPayload | null> | prisma.TRSubscriptionPayload | null
  }
  letterEmail: {
    type: 'LetterEmailSubscriptionPayload'
    args: Record<SubscriptionLetterEmailArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LetterEmailSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmailSubscriptionPayload | null> | prisma.LetterEmailSubscriptionPayload | null
  }
}
  

// Types for PostSubscriptionPayload

type PostSubscriptionPayloadObject =
  | PostSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PostSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PostSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Post'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Post | null> | prisma.Post | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PostPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PostSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PostPreviousValues | null> | prisma.PostPreviousValues | null
  }
}
  

// Types for PostPreviousValues

type PostPreviousValuesObject =
  | PostPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type PostPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'published'
  | 'title'
  | 'content'



  

export interface PostPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'companyName', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'resetToken', args?: [] | false, alias?: string  } 
  | { name: 'resetExpires', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'password'
  | 'name'
  | 'companyName'
  | 'role'
  | 'resetToken'
  | 'resetExpires'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  companyName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role> | prisma.Role
  }
  resetToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  resetExpires: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for DeviceSubscriptionPayload

type DeviceSubscriptionPayloadObject =
  | DeviceSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DeviceSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DeviceSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DeviceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Device'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DeviceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Device | null> | prisma.Device | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DevicePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DeviceSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DevicePreviousValues | null> | prisma.DevicePreviousValues | null
  }
}
  

// Types for DevicePreviousValues

type DevicePreviousValuesObject =
  | DevicePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'name_EN', args?: [] | false, alias?: string  } 
  | { name: 'name_UA', args?: [] | false, alias?: string  } 
  | { name: 'name_RUS', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'module', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type DevicePreviousValuesFields =
  | 'id'
  | 'published'
  | 'name_EN'
  | 'name_UA'
  | 'name_RUS'
  | 'category'
  | 'module'
  | 'createdAt'
  | 'updatedAt'



  

export interface DevicePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_EN: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_UA: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_RUS: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  category: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  module: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TRSubscriptionPayload

type TRSubscriptionPayloadObject =
  | TRSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TRSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TRSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TRSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TR'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TRSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TR | null> | prisma.TR | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TRPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TRSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TRPreviousValues | null> | prisma.TRPreviousValues | null
  }
}
  

// Types for TRPreviousValues

type TRPreviousValuesObject =
  | TRPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name_TR_UA', args?: [] | false, alias?: string  } 
  | { name: 'name_TR_EN', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TRPreviousValuesFields =
  | 'id'
  | 'name_TR_UA'
  | 'name_TR_EN'
  | 'createdAt'
  | 'updatedAt'



  

export interface TRPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_TR_UA: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name_TR_EN: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LetterEmailSubscriptionPayload

type LetterEmailSubscriptionPayloadObject =
  | LetterEmailSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LetterEmailSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LetterEmailSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LetterEmailSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'LetterEmail'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LetterEmailSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmail | null> | prisma.LetterEmail | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LetterEmailPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LetterEmailSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LetterEmailPreviousValues | null> | prisma.LetterEmailPreviousValues | null
  }
}
  

// Types for LetterEmailPreviousValues

type LetterEmailPreviousValuesObject =
  | LetterEmailPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'from', args?: [] | false, alias?: string  } 
  | { name: 'subject', args?: [] | false, alias?: string  } 
  | { name: 'text', args?: [] | false, alias?: string  } 

type LetterEmailPreviousValuesFields =
  | 'id'
  | 'from'
  | 'subject'
  | 'text'



  

export interface LetterEmailPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  from: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subject: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  text: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface PostWhereUniqueInput {
  id?: string | null
}
export type PostWhereUniqueInputInputObject =
  | Extract<keyof PostWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PostWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  published?: boolean | null
  published_not?: boolean | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  author?: UserWhereInput | null
  AND?: PostWhereInput[]
  OR?: PostWhereInput[]
  NOT?: PostWhereInput[]
}
export type PostWhereInputInputObject =
  | Extract<keyof PostWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  companyName?: string | null
  companyName_not?: string | null
  companyName_in?: string[]
  companyName_not_in?: string[]
  companyName_lt?: string | null
  companyName_lte?: string | null
  companyName_gt?: string | null
  companyName_gte?: string | null
  companyName_contains?: string | null
  companyName_not_contains?: string | null
  companyName_starts_with?: string | null
  companyName_not_starts_with?: string | null
  companyName_ends_with?: string | null
  companyName_not_ends_with?: string | null
  posts_every?: PostWhereInput | null
  posts_some?: PostWhereInput | null
  posts_none?: PostWhereInput | null
  devices_every?: DeviceWhereInput | null
  devices_some?: DeviceWhereInput | null
  devices_none?: DeviceWhereInput | null
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  resetToken?: string | null
  resetToken_not?: string | null
  resetToken_in?: string[]
  resetToken_not_in?: string[]
  resetToken_lt?: string | null
  resetToken_lte?: string | null
  resetToken_gt?: string | null
  resetToken_gte?: string | null
  resetToken_contains?: string | null
  resetToken_not_contains?: string | null
  resetToken_starts_with?: string | null
  resetToken_not_starts_with?: string | null
  resetToken_ends_with?: string | null
  resetToken_not_ends_with?: string | null
  resetExpires?: string | null
  resetExpires_not?: string | null
  resetExpires_in?: string[]
  resetExpires_not_in?: string[]
  resetExpires_lt?: string | null
  resetExpires_lte?: string | null
  resetExpires_gt?: string | null
  resetExpires_gte?: string | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'companyName_not', alias?: string  } 
  | { name: 'companyName_in', alias?: string  } 
  | { name: 'companyName_not_in', alias?: string  } 
  | { name: 'companyName_lt', alias?: string  } 
  | { name: 'companyName_lte', alias?: string  } 
  | { name: 'companyName_gt', alias?: string  } 
  | { name: 'companyName_gte', alias?: string  } 
  | { name: 'companyName_contains', alias?: string  } 
  | { name: 'companyName_not_contains', alias?: string  } 
  | { name: 'companyName_starts_with', alias?: string  } 
  | { name: 'companyName_not_starts_with', alias?: string  } 
  | { name: 'companyName_ends_with', alias?: string  } 
  | { name: 'companyName_not_ends_with', alias?: string  } 
  | { name: 'posts_every', alias?: string  } 
  | { name: 'posts_some', alias?: string  } 
  | { name: 'posts_none', alias?: string  } 
  | { name: 'devices_every', alias?: string  } 
  | { name: 'devices_some', alias?: string  } 
  | { name: 'devices_none', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetToken_not', alias?: string  } 
  | { name: 'resetToken_in', alias?: string  } 
  | { name: 'resetToken_not_in', alias?: string  } 
  | { name: 'resetToken_lt', alias?: string  } 
  | { name: 'resetToken_lte', alias?: string  } 
  | { name: 'resetToken_gt', alias?: string  } 
  | { name: 'resetToken_gte', alias?: string  } 
  | { name: 'resetToken_contains', alias?: string  } 
  | { name: 'resetToken_not_contains', alias?: string  } 
  | { name: 'resetToken_starts_with', alias?: string  } 
  | { name: 'resetToken_not_starts_with', alias?: string  } 
  | { name: 'resetToken_ends_with', alias?: string  } 
  | { name: 'resetToken_not_ends_with', alias?: string  } 
  | { name: 'resetExpires', alias?: string  } 
  | { name: 'resetExpires_not', alias?: string  } 
  | { name: 'resetExpires_in', alias?: string  } 
  | { name: 'resetExpires_not_in', alias?: string  } 
  | { name: 'resetExpires_lt', alias?: string  } 
  | { name: 'resetExpires_lte', alias?: string  } 
  | { name: 'resetExpires_gt', alias?: string  } 
  | { name: 'resetExpires_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DeviceWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  published?: boolean | null
  published_not?: boolean | null
  name_EN?: string | null
  name_EN_not?: string | null
  name_EN_in?: string[]
  name_EN_not_in?: string[]
  name_EN_lt?: string | null
  name_EN_lte?: string | null
  name_EN_gt?: string | null
  name_EN_gte?: string | null
  name_EN_contains?: string | null
  name_EN_not_contains?: string | null
  name_EN_starts_with?: string | null
  name_EN_not_starts_with?: string | null
  name_EN_ends_with?: string | null
  name_EN_not_ends_with?: string | null
  name_UA?: string | null
  name_UA_not?: string | null
  name_UA_in?: string[]
  name_UA_not_in?: string[]
  name_UA_lt?: string | null
  name_UA_lte?: string | null
  name_UA_gt?: string | null
  name_UA_gte?: string | null
  name_UA_contains?: string | null
  name_UA_not_contains?: string | null
  name_UA_starts_with?: string | null
  name_UA_not_starts_with?: string | null
  name_UA_ends_with?: string | null
  name_UA_not_ends_with?: string | null
  name_RUS?: string | null
  name_RUS_not?: string | null
  name_RUS_in?: string[]
  name_RUS_not_in?: string[]
  name_RUS_lt?: string | null
  name_RUS_lte?: string | null
  name_RUS_gt?: string | null
  name_RUS_gte?: string | null
  name_RUS_contains?: string | null
  name_RUS_not_contains?: string | null
  name_RUS_starts_with?: string | null
  name_RUS_not_starts_with?: string | null
  name_RUS_ends_with?: string | null
  name_RUS_not_ends_with?: string | null
  category?: string | null
  category_not?: string | null
  category_in?: string[]
  category_not_in?: string[]
  category_lt?: string | null
  category_lte?: string | null
  category_gt?: string | null
  category_gte?: string | null
  category_contains?: string | null
  category_not_contains?: string | null
  category_starts_with?: string | null
  category_not_starts_with?: string | null
  category_ends_with?: string | null
  category_not_ends_with?: string | null
  module?: string | null
  module_not?: string | null
  module_in?: string[]
  module_not_in?: string[]
  module_lt?: string | null
  module_lte?: string | null
  module_gt?: string | null
  module_gte?: string | null
  module_contains?: string | null
  module_not_contains?: string | null
  module_starts_with?: string | null
  module_not_starts_with?: string | null
  module_ends_with?: string | null
  module_not_ends_with?: string | null
  tr?: TRWhereInput | null
  author?: UserWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: DeviceWhereInput[]
  OR?: DeviceWhereInput[]
  NOT?: DeviceWhereInput[]
}
export type DeviceWhereInputInputObject =
  | Extract<keyof DeviceWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_EN_not', alias?: string  } 
  | { name: 'name_EN_in', alias?: string  } 
  | { name: 'name_EN_not_in', alias?: string  } 
  | { name: 'name_EN_lt', alias?: string  } 
  | { name: 'name_EN_lte', alias?: string  } 
  | { name: 'name_EN_gt', alias?: string  } 
  | { name: 'name_EN_gte', alias?: string  } 
  | { name: 'name_EN_contains', alias?: string  } 
  | { name: 'name_EN_not_contains', alias?: string  } 
  | { name: 'name_EN_starts_with', alias?: string  } 
  | { name: 'name_EN_not_starts_with', alias?: string  } 
  | { name: 'name_EN_ends_with', alias?: string  } 
  | { name: 'name_EN_not_ends_with', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_UA_not', alias?: string  } 
  | { name: 'name_UA_in', alias?: string  } 
  | { name: 'name_UA_not_in', alias?: string  } 
  | { name: 'name_UA_lt', alias?: string  } 
  | { name: 'name_UA_lte', alias?: string  } 
  | { name: 'name_UA_gt', alias?: string  } 
  | { name: 'name_UA_gte', alias?: string  } 
  | { name: 'name_UA_contains', alias?: string  } 
  | { name: 'name_UA_not_contains', alias?: string  } 
  | { name: 'name_UA_starts_with', alias?: string  } 
  | { name: 'name_UA_not_starts_with', alias?: string  } 
  | { name: 'name_UA_ends_with', alias?: string  } 
  | { name: 'name_UA_not_ends_with', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'name_RUS_not', alias?: string  } 
  | { name: 'name_RUS_in', alias?: string  } 
  | { name: 'name_RUS_not_in', alias?: string  } 
  | { name: 'name_RUS_lt', alias?: string  } 
  | { name: 'name_RUS_lte', alias?: string  } 
  | { name: 'name_RUS_gt', alias?: string  } 
  | { name: 'name_RUS_gte', alias?: string  } 
  | { name: 'name_RUS_contains', alias?: string  } 
  | { name: 'name_RUS_not_contains', alias?: string  } 
  | { name: 'name_RUS_starts_with', alias?: string  } 
  | { name: 'name_RUS_not_starts_with', alias?: string  } 
  | { name: 'name_RUS_ends_with', alias?: string  } 
  | { name: 'name_RUS_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'category_not', alias?: string  } 
  | { name: 'category_in', alias?: string  } 
  | { name: 'category_not_in', alias?: string  } 
  | { name: 'category_lt', alias?: string  } 
  | { name: 'category_lte', alias?: string  } 
  | { name: 'category_gt', alias?: string  } 
  | { name: 'category_gte', alias?: string  } 
  | { name: 'category_contains', alias?: string  } 
  | { name: 'category_not_contains', alias?: string  } 
  | { name: 'category_starts_with', alias?: string  } 
  | { name: 'category_not_starts_with', alias?: string  } 
  | { name: 'category_ends_with', alias?: string  } 
  | { name: 'category_not_ends_with', alias?: string  } 
  | { name: 'module', alias?: string  } 
  | { name: 'module_not', alias?: string  } 
  | { name: 'module_in', alias?: string  } 
  | { name: 'module_not_in', alias?: string  } 
  | { name: 'module_lt', alias?: string  } 
  | { name: 'module_lte', alias?: string  } 
  | { name: 'module_gt', alias?: string  } 
  | { name: 'module_gte', alias?: string  } 
  | { name: 'module_contains', alias?: string  } 
  | { name: 'module_not_contains', alias?: string  } 
  | { name: 'module_starts_with', alias?: string  } 
  | { name: 'module_not_starts_with', alias?: string  } 
  | { name: 'module_ends_with', alias?: string  } 
  | { name: 'module_not_ends_with', alias?: string  } 
  | { name: 'tr', alias?: string  } 
  | { name: 'author', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TRWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name_TR_UA?: string | null
  name_TR_UA_not?: string | null
  name_TR_UA_in?: string[]
  name_TR_UA_not_in?: string[]
  name_TR_UA_lt?: string | null
  name_TR_UA_lte?: string | null
  name_TR_UA_gt?: string | null
  name_TR_UA_gte?: string | null
  name_TR_UA_contains?: string | null
  name_TR_UA_not_contains?: string | null
  name_TR_UA_starts_with?: string | null
  name_TR_UA_not_starts_with?: string | null
  name_TR_UA_ends_with?: string | null
  name_TR_UA_not_ends_with?: string | null
  name_TR_EN?: string | null
  name_TR_EN_not?: string | null
  name_TR_EN_in?: string[]
  name_TR_EN_not_in?: string[]
  name_TR_EN_lt?: string | null
  name_TR_EN_lte?: string | null
  name_TR_EN_gt?: string | null
  name_TR_EN_gte?: string | null
  name_TR_EN_contains?: string | null
  name_TR_EN_not_contains?: string | null
  name_TR_EN_starts_with?: string | null
  name_TR_EN_not_starts_with?: string | null
  name_TR_EN_ends_with?: string | null
  name_TR_EN_not_ends_with?: string | null
  device_id_every?: DeviceWhereInput | null
  device_id_some?: DeviceWhereInput | null
  device_id_none?: DeviceWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TRWhereInput[]
  OR?: TRWhereInput[]
  NOT?: TRWhereInput[]
}
export type TRWhereInputInputObject =
  | Extract<keyof TRWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name_TR_UA', alias?: string  } 
  | { name: 'name_TR_UA_not', alias?: string  } 
  | { name: 'name_TR_UA_in', alias?: string  } 
  | { name: 'name_TR_UA_not_in', alias?: string  } 
  | { name: 'name_TR_UA_lt', alias?: string  } 
  | { name: 'name_TR_UA_lte', alias?: string  } 
  | { name: 'name_TR_UA_gt', alias?: string  } 
  | { name: 'name_TR_UA_gte', alias?: string  } 
  | { name: 'name_TR_UA_contains', alias?: string  } 
  | { name: 'name_TR_UA_not_contains', alias?: string  } 
  | { name: 'name_TR_UA_starts_with', alias?: string  } 
  | { name: 'name_TR_UA_not_starts_with', alias?: string  } 
  | { name: 'name_TR_UA_ends_with', alias?: string  } 
  | { name: 'name_TR_UA_not_ends_with', alias?: string  } 
  | { name: 'name_TR_EN', alias?: string  } 
  | { name: 'name_TR_EN_not', alias?: string  } 
  | { name: 'name_TR_EN_in', alias?: string  } 
  | { name: 'name_TR_EN_not_in', alias?: string  } 
  | { name: 'name_TR_EN_lt', alias?: string  } 
  | { name: 'name_TR_EN_lte', alias?: string  } 
  | { name: 'name_TR_EN_gt', alias?: string  } 
  | { name: 'name_TR_EN_gte', alias?: string  } 
  | { name: 'name_TR_EN_contains', alias?: string  } 
  | { name: 'name_TR_EN_not_contains', alias?: string  } 
  | { name: 'name_TR_EN_starts_with', alias?: string  } 
  | { name: 'name_TR_EN_not_starts_with', alias?: string  } 
  | { name: 'name_TR_EN_ends_with', alias?: string  } 
  | { name: 'name_TR_EN_not_ends_with', alias?: string  } 
  | { name: 'device_id_every', alias?: string  } 
  | { name: 'device_id_some', alias?: string  } 
  | { name: 'device_id_none', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface DeviceWhereUniqueInput {
  id?: string | null
}
export type DeviceWhereUniqueInputInputObject =
  | Extract<keyof DeviceWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TRWhereUniqueInput {
  id?: string | null
}
export type TRWhereUniqueInputInputObject =
  | Extract<keyof TRWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface LetterEmailWhereUniqueInput {
  id?: string | null
}
export type LetterEmailWhereUniqueInputInputObject =
  | Extract<keyof LetterEmailWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface LetterEmailWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  from?: string | null
  from_not?: string | null
  from_in?: string[]
  from_not_in?: string[]
  from_lt?: string | null
  from_lte?: string | null
  from_gt?: string | null
  from_gte?: string | null
  from_contains?: string | null
  from_not_contains?: string | null
  from_starts_with?: string | null
  from_not_starts_with?: string | null
  from_ends_with?: string | null
  from_not_ends_with?: string | null
  subject?: string | null
  subject_not?: string | null
  subject_in?: string[]
  subject_not_in?: string[]
  subject_lt?: string | null
  subject_lte?: string | null
  subject_gt?: string | null
  subject_gte?: string | null
  subject_contains?: string | null
  subject_not_contains?: string | null
  subject_starts_with?: string | null
  subject_not_starts_with?: string | null
  subject_ends_with?: string | null
  subject_not_ends_with?: string | null
  text?: string | null
  text_not?: string | null
  text_in?: string[]
  text_not_in?: string[]
  text_lt?: string | null
  text_lte?: string | null
  text_gt?: string | null
  text_gte?: string | null
  text_contains?: string | null
  text_not_contains?: string | null
  text_starts_with?: string | null
  text_not_starts_with?: string | null
  text_ends_with?: string | null
  text_not_ends_with?: string | null
  AND?: LetterEmailWhereInput[]
  OR?: LetterEmailWhereInput[]
  NOT?: LetterEmailWhereInput[]
}
export type LetterEmailWhereInputInputObject =
  | Extract<keyof LetterEmailWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'from_not', alias?: string  } 
  | { name: 'from_in', alias?: string  } 
  | { name: 'from_not_in', alias?: string  } 
  | { name: 'from_lt', alias?: string  } 
  | { name: 'from_lte', alias?: string  } 
  | { name: 'from_gt', alias?: string  } 
  | { name: 'from_gte', alias?: string  } 
  | { name: 'from_contains', alias?: string  } 
  | { name: 'from_not_contains', alias?: string  } 
  | { name: 'from_starts_with', alias?: string  } 
  | { name: 'from_not_starts_with', alias?: string  } 
  | { name: 'from_ends_with', alias?: string  } 
  | { name: 'from_not_ends_with', alias?: string  } 
  | { name: 'subject', alias?: string  } 
  | { name: 'subject_not', alias?: string  } 
  | { name: 'subject_in', alias?: string  } 
  | { name: 'subject_not_in', alias?: string  } 
  | { name: 'subject_lt', alias?: string  } 
  | { name: 'subject_lte', alias?: string  } 
  | { name: 'subject_gt', alias?: string  } 
  | { name: 'subject_gte', alias?: string  } 
  | { name: 'subject_contains', alias?: string  } 
  | { name: 'subject_not_contains', alias?: string  } 
  | { name: 'subject_starts_with', alias?: string  } 
  | { name: 'subject_not_starts_with', alias?: string  } 
  | { name: 'subject_ends_with', alias?: string  } 
  | { name: 'subject_not_ends_with', alias?: string  } 
  | { name: 'text', alias?: string  } 
  | { name: 'text_not', alias?: string  } 
  | { name: 'text_in', alias?: string  } 
  | { name: 'text_not_in', alias?: string  } 
  | { name: 'text_lt', alias?: string  } 
  | { name: 'text_lte', alias?: string  } 
  | { name: 'text_gt', alias?: string  } 
  | { name: 'text_gte', alias?: string  } 
  | { name: 'text_contains', alias?: string  } 
  | { name: 'text_not_contains', alias?: string  } 
  | { name: 'text_starts_with', alias?: string  } 
  | { name: 'text_not_starts_with', alias?: string  } 
  | { name: 'text_ends_with', alias?: string  } 
  | { name: 'text_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostCreateInput {
  id?: string | null
  published?: boolean | null
  title?: string
  content?: string
  author?: UserCreateOneWithoutPostsInput
}
export type PostCreateInputInputObject =
  | Extract<keyof PostCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserCreateOneWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutPostsInputInputObject =
  | Extract<keyof UserCreateOneWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutPostsInput {
  id?: string | null
  email?: string
  password?: string
  name?: string
  companyName?: string | null
  devices?: DeviceCreateManyWithoutAuthorInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  resetExpires?: string | null
}
export type UserCreateWithoutPostsInputInputObject =
  | Extract<keyof UserCreateWithoutPostsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'devices', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetExpires', alias?: string  } 
  
export interface DeviceCreateManyWithoutAuthorInput {
  create?: DeviceCreateWithoutAuthorInput[]
  connect?: DeviceWhereUniqueInput[]
}
export type DeviceCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof DeviceCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DeviceCreateWithoutAuthorInput {
  id?: string | null
  published?: boolean | null
  name_EN?: string
  name_UA?: string
  name_RUS?: string
  category?: string
  module?: string | null
  tr?: TRCreateOneWithoutDevice_idInput
}
export type DeviceCreateWithoutAuthorInputInputObject =
  | Extract<keyof DeviceCreateWithoutAuthorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'module', alias?: string  } 
  | { name: 'tr', alias?: string  } 
  
export interface TRCreateOneWithoutDevice_idInput {
  create?: TRCreateWithoutDevice_idInput | null
  connect?: TRWhereUniqueInput | null
}
export type TRCreateOneWithoutDevice_idInputInputObject =
  | Extract<keyof TRCreateOneWithoutDevice_idInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TRCreateWithoutDevice_idInput {
  id?: string | null
  name_TR_UA?: string
  name_TR_EN?: string
}
export type TRCreateWithoutDevice_idInputInputObject =
  | Extract<keyof TRCreateWithoutDevice_idInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name_TR_UA', alias?: string  } 
  | { name: 'name_TR_EN', alias?: string  } 
  
export interface PostUpdateInput {
  published?: boolean | null
  title?: string | null
  content?: string | null
  author?: UserUpdateOneRequiredWithoutPostsInput | null
}
export type PostUpdateInputInputObject =
  | Extract<keyof PostUpdateInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: UserCreateWithoutPostsInput | null
  update?: UserUpdateWithoutPostsDataInput | null
  upsert?: UserUpsertWithoutPostsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutPostsInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutPostsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutPostsDataInput {
  email?: string | null
  password?: string | null
  name?: string | null
  companyName?: string | null
  devices?: DeviceUpdateManyWithoutAuthorInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  resetExpires?: string | null
}
export type UserUpdateWithoutPostsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutPostsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'devices', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetExpires', alias?: string  } 
  
export interface DeviceUpdateManyWithoutAuthorInput {
  create?: DeviceCreateWithoutAuthorInput[]
  delete?: DeviceWhereUniqueInput[]
  connect?: DeviceWhereUniqueInput[]
  set?: DeviceWhereUniqueInput[]
  disconnect?: DeviceWhereUniqueInput[]
  update?: DeviceUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: DeviceUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: DeviceScalarWhereInput[]
  updateMany?: DeviceUpdateManyWithWhereNestedInput[]
}
export type DeviceUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof DeviceUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DeviceUpdateWithWhereUniqueWithoutAuthorInput {
  where?: DeviceWhereUniqueInput
  data?: DeviceUpdateWithoutAuthorDataInput
}
export type DeviceUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof DeviceUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DeviceUpdateWithoutAuthorDataInput {
  published?: boolean | null
  name_EN?: string | null
  name_UA?: string | null
  name_RUS?: string | null
  category?: string | null
  module?: string | null
  tr?: TRUpdateOneRequiredWithoutDevice_idInput | null
}
export type DeviceUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof DeviceUpdateWithoutAuthorDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'module', alias?: string  } 
  | { name: 'tr', alias?: string  } 
  
export interface TRUpdateOneRequiredWithoutDevice_idInput {
  create?: TRCreateWithoutDevice_idInput | null
  update?: TRUpdateWithoutDevice_idDataInput | null
  upsert?: TRUpsertWithoutDevice_idInput | null
  connect?: TRWhereUniqueInput | null
}
export type TRUpdateOneRequiredWithoutDevice_idInputInputObject =
  | Extract<keyof TRUpdateOneRequiredWithoutDevice_idInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TRUpdateWithoutDevice_idDataInput {
  name_TR_UA?: string | null
  name_TR_EN?: string | null
}
export type TRUpdateWithoutDevice_idDataInputInputObject =
  | Extract<keyof TRUpdateWithoutDevice_idDataInput, string>
  | { name: 'name_TR_UA', alias?: string  } 
  | { name: 'name_TR_EN', alias?: string  } 
  
export interface TRUpsertWithoutDevice_idInput {
  update?: TRUpdateWithoutDevice_idDataInput
  create?: TRCreateWithoutDevice_idInput
}
export type TRUpsertWithoutDevice_idInputInputObject =
  | Extract<keyof TRUpsertWithoutDevice_idInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DeviceUpsertWithWhereUniqueWithoutAuthorInput {
  where?: DeviceWhereUniqueInput
  update?: DeviceUpdateWithoutAuthorDataInput
  create?: DeviceCreateWithoutAuthorInput
}
export type DeviceUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof DeviceUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DeviceScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  published?: boolean | null
  published_not?: boolean | null
  name_EN?: string | null
  name_EN_not?: string | null
  name_EN_in?: string[]
  name_EN_not_in?: string[]
  name_EN_lt?: string | null
  name_EN_lte?: string | null
  name_EN_gt?: string | null
  name_EN_gte?: string | null
  name_EN_contains?: string | null
  name_EN_not_contains?: string | null
  name_EN_starts_with?: string | null
  name_EN_not_starts_with?: string | null
  name_EN_ends_with?: string | null
  name_EN_not_ends_with?: string | null
  name_UA?: string | null
  name_UA_not?: string | null
  name_UA_in?: string[]
  name_UA_not_in?: string[]
  name_UA_lt?: string | null
  name_UA_lte?: string | null
  name_UA_gt?: string | null
  name_UA_gte?: string | null
  name_UA_contains?: string | null
  name_UA_not_contains?: string | null
  name_UA_starts_with?: string | null
  name_UA_not_starts_with?: string | null
  name_UA_ends_with?: string | null
  name_UA_not_ends_with?: string | null
  name_RUS?: string | null
  name_RUS_not?: string | null
  name_RUS_in?: string[]
  name_RUS_not_in?: string[]
  name_RUS_lt?: string | null
  name_RUS_lte?: string | null
  name_RUS_gt?: string | null
  name_RUS_gte?: string | null
  name_RUS_contains?: string | null
  name_RUS_not_contains?: string | null
  name_RUS_starts_with?: string | null
  name_RUS_not_starts_with?: string | null
  name_RUS_ends_with?: string | null
  name_RUS_not_ends_with?: string | null
  category?: string | null
  category_not?: string | null
  category_in?: string[]
  category_not_in?: string[]
  category_lt?: string | null
  category_lte?: string | null
  category_gt?: string | null
  category_gte?: string | null
  category_contains?: string | null
  category_not_contains?: string | null
  category_starts_with?: string | null
  category_not_starts_with?: string | null
  category_ends_with?: string | null
  category_not_ends_with?: string | null
  module?: string | null
  module_not?: string | null
  module_in?: string[]
  module_not_in?: string[]
  module_lt?: string | null
  module_lte?: string | null
  module_gt?: string | null
  module_gte?: string | null
  module_contains?: string | null
  module_not_contains?: string | null
  module_starts_with?: string | null
  module_not_starts_with?: string | null
  module_ends_with?: string | null
  module_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: DeviceScalarWhereInput[]
  OR?: DeviceScalarWhereInput[]
  NOT?: DeviceScalarWhereInput[]
}
export type DeviceScalarWhereInputInputObject =
  | Extract<keyof DeviceScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_EN_not', alias?: string  } 
  | { name: 'name_EN_in', alias?: string  } 
  | { name: 'name_EN_not_in', alias?: string  } 
  | { name: 'name_EN_lt', alias?: string  } 
  | { name: 'name_EN_lte', alias?: string  } 
  | { name: 'name_EN_gt', alias?: string  } 
  | { name: 'name_EN_gte', alias?: string  } 
  | { name: 'name_EN_contains', alias?: string  } 
  | { name: 'name_EN_not_contains', alias?: string  } 
  | { name: 'name_EN_starts_with', alias?: string  } 
  | { name: 'name_EN_not_starts_with', alias?: string  } 
  | { name: 'name_EN_ends_with', alias?: string  } 
  | { name: 'name_EN_not_ends_with', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_UA_not', alias?: string  } 
  | { name: 'name_UA_in', alias?: string  } 
  | { name: 'name_UA_not_in', alias?: string  } 
  | { name: 'name_UA_lt', alias?: string  } 
  | { name: 'name_UA_lte', alias?: string  } 
  | { name: 'name_UA_gt', alias?: string  } 
  | { name: 'name_UA_gte', alias?: string  } 
  | { name: 'name_UA_contains', alias?: string  } 
  | { name: 'name_UA_not_contains', alias?: string  } 
  | { name: 'name_UA_starts_with', alias?: string  } 
  | { name: 'name_UA_not_starts_with', alias?: string  } 
  | { name: 'name_UA_ends_with', alias?: string  } 
  | { name: 'name_UA_not_ends_with', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'name_RUS_not', alias?: string  } 
  | { name: 'name_RUS_in', alias?: string  } 
  | { name: 'name_RUS_not_in', alias?: string  } 
  | { name: 'name_RUS_lt', alias?: string  } 
  | { name: 'name_RUS_lte', alias?: string  } 
  | { name: 'name_RUS_gt', alias?: string  } 
  | { name: 'name_RUS_gte', alias?: string  } 
  | { name: 'name_RUS_contains', alias?: string  } 
  | { name: 'name_RUS_not_contains', alias?: string  } 
  | { name: 'name_RUS_starts_with', alias?: string  } 
  | { name: 'name_RUS_not_starts_with', alias?: string  } 
  | { name: 'name_RUS_ends_with', alias?: string  } 
  | { name: 'name_RUS_not_ends_with', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'category_not', alias?: string  } 
  | { name: 'category_in', alias?: string  } 
  | { name: 'category_not_in', alias?: string  } 
  | { name: 'category_lt', alias?: string  } 
  | { name: 'category_lte', alias?: string  } 
  | { name: 'category_gt', alias?: string  } 
  | { name: 'category_gte', alias?: string  } 
  | { name: 'category_contains', alias?: string  } 
  | { name: 'category_not_contains', alias?: string  } 
  | { name: 'category_starts_with', alias?: string  } 
  | { name: 'category_not_starts_with', alias?: string  } 
  | { name: 'category_ends_with', alias?: string  } 
  | { name: 'category_not_ends_with', alias?: string  } 
  | { name: 'module', alias?: string  } 
  | { name: 'module_not', alias?: string  } 
  | { name: 'module_in', alias?: string  } 
  | { name: 'module_not_in', alias?: string  } 
  | { name: 'module_lt', alias?: string  } 
  | { name: 'module_lte', alias?: string  } 
  | { name: 'module_gt', alias?: string  } 
  | { name: 'module_gte', alias?: string  } 
  | { name: 'module_contains', alias?: string  } 
  | { name: 'module_not_contains', alias?: string  } 
  | { name: 'module_starts_with', alias?: string  } 
  | { name: 'module_not_starts_with', alias?: string  } 
  | { name: 'module_ends_with', alias?: string  } 
  | { name: 'module_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DeviceUpdateManyWithWhereNestedInput {
  where?: DeviceScalarWhereInput
  data?: DeviceUpdateManyDataInput
}
export type DeviceUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof DeviceUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DeviceUpdateManyDataInput {
  published?: boolean | null
  name_EN?: string | null
  name_UA?: string | null
  name_RUS?: string | null
  category?: string | null
  module?: string | null
}
export type DeviceUpdateManyDataInputInputObject =
  | Extract<keyof DeviceUpdateManyDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'module', alias?: string  } 
  
export interface UserUpsertWithoutPostsInput {
  update?: UserUpdateWithoutPostsDataInput
  create?: UserCreateWithoutPostsInput
}
export type UserUpsertWithoutPostsInputInputObject =
  | Extract<keyof UserUpsertWithoutPostsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostUpdateManyMutationInput {
  published?: boolean | null
  title?: string | null
  content?: string | null
}
export type PostUpdateManyMutationInputInputObject =
  | Extract<keyof PostUpdateManyMutationInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string
  password?: string
  name?: string
  companyName?: string | null
  posts?: PostCreateManyWithoutAuthorInput | null
  devices?: DeviceCreateManyWithoutAuthorInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  resetExpires?: string | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'devices', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetExpires', alias?: string  } 
  
export interface PostCreateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  connect?: PostWhereUniqueInput[]
}
export type PostCreateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PostCreateWithoutAuthorInput {
  id?: string | null
  published?: boolean | null
  title?: string
  content?: string
}
export type PostCreateWithoutAuthorInputInputObject =
  | Extract<keyof PostCreateWithoutAuthorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  password?: string | null
  name?: string | null
  companyName?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  devices?: DeviceUpdateManyWithoutAuthorInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  resetExpires?: string | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'devices', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetExpires', alias?: string  } 
  
export interface PostUpdateManyWithoutAuthorInput {
  create?: PostCreateWithoutAuthorInput[]
  delete?: PostWhereUniqueInput[]
  connect?: PostWhereUniqueInput[]
  set?: PostWhereUniqueInput[]
  disconnect?: PostWhereUniqueInput[]
  update?: PostUpdateWithWhereUniqueWithoutAuthorInput[]
  upsert?: PostUpsertWithWhereUniqueWithoutAuthorInput[]
  deleteMany?: PostScalarWhereInput[]
  updateMany?: PostUpdateManyWithWhereNestedInput[]
}
export type PostUpdateManyWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateManyWithoutAuthorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  data?: PostUpdateWithoutAuthorDataInput
}
export type PostUpdateWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpdateWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateWithoutAuthorDataInput {
  published?: boolean | null
  title?: string | null
  content?: string | null
}
export type PostUpdateWithoutAuthorDataInputInputObject =
  | Extract<keyof PostUpdateWithoutAuthorDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where?: PostWhereUniqueInput
  update?: PostUpdateWithoutAuthorDataInput
  create?: PostCreateWithoutAuthorInput
}
export type PostUpsertWithWhereUniqueWithoutAuthorInputInputObject =
  | Extract<keyof PostUpsertWithWhereUniqueWithoutAuthorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PostScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  published?: boolean | null
  published_not?: boolean | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  AND?: PostScalarWhereInput[]
  OR?: PostScalarWhereInput[]
  NOT?: PostScalarWhereInput[]
}
export type PostScalarWhereInputInputObject =
  | Extract<keyof PostScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PostUpdateManyWithWhereNestedInput {
  where?: PostScalarWhereInput
  data?: PostUpdateManyDataInput
}
export type PostUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PostUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PostUpdateManyDataInput {
  published?: boolean | null
  title?: string | null
  content?: string | null
}
export type PostUpdateManyDataInputInputObject =
  | Extract<keyof PostUpdateManyDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  password?: string | null
  name?: string | null
  companyName?: string | null
  role?: prisma.Role | null
  resetToken?: string | null
  resetExpires?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetExpires', alias?: string  } 
  
export interface DeviceCreateInput {
  id?: string | null
  published?: boolean | null
  name_EN?: string
  name_UA?: string
  name_RUS?: string
  category?: string
  module?: string | null
  tr?: TRCreateOneWithoutDevice_idInput
  author?: UserCreateOneWithoutDevicesInput
}
export type DeviceCreateInputInputObject =
  | Extract<keyof DeviceCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'module', alias?: string  } 
  | { name: 'tr', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserCreateOneWithoutDevicesInput {
  create?: UserCreateWithoutDevicesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutDevicesInputInputObject =
  | Extract<keyof UserCreateOneWithoutDevicesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutDevicesInput {
  id?: string | null
  email?: string
  password?: string
  name?: string
  companyName?: string | null
  posts?: PostCreateManyWithoutAuthorInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  resetExpires?: string | null
}
export type UserCreateWithoutDevicesInputInputObject =
  | Extract<keyof UserCreateWithoutDevicesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetExpires', alias?: string  } 
  
export interface DeviceUpdateInput {
  published?: boolean | null
  name_EN?: string | null
  name_UA?: string | null
  name_RUS?: string | null
  category?: string | null
  module?: string | null
  tr?: TRUpdateOneRequiredWithoutDevice_idInput | null
  author?: UserUpdateOneRequiredWithoutDevicesInput | null
}
export type DeviceUpdateInputInputObject =
  | Extract<keyof DeviceUpdateInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'module', alias?: string  } 
  | { name: 'tr', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutDevicesInput {
  create?: UserCreateWithoutDevicesInput | null
  update?: UserUpdateWithoutDevicesDataInput | null
  upsert?: UserUpsertWithoutDevicesInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutDevicesInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutDevicesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutDevicesDataInput {
  email?: string | null
  password?: string | null
  name?: string | null
  companyName?: string | null
  posts?: PostUpdateManyWithoutAuthorInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  resetExpires?: string | null
}
export type UserUpdateWithoutDevicesDataInputInputObject =
  | Extract<keyof UserUpdateWithoutDevicesDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'companyName', alias?: string  } 
  | { name: 'posts', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetExpires', alias?: string  } 
  
export interface UserUpsertWithoutDevicesInput {
  update?: UserUpdateWithoutDevicesDataInput
  create?: UserCreateWithoutDevicesInput
}
export type UserUpsertWithoutDevicesInputInputObject =
  | Extract<keyof UserUpsertWithoutDevicesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DeviceUpdateManyMutationInput {
  published?: boolean | null
  name_EN?: string | null
  name_UA?: string | null
  name_RUS?: string | null
  category?: string | null
  module?: string | null
}
export type DeviceUpdateManyMutationInputInputObject =
  | Extract<keyof DeviceUpdateManyMutationInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'module', alias?: string  } 
  
export interface TRCreateInput {
  id?: string | null
  name_TR_UA?: string
  name_TR_EN?: string
  device_id?: DeviceCreateManyWithoutTrInput | null
}
export type TRCreateInputInputObject =
  | Extract<keyof TRCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name_TR_UA', alias?: string  } 
  | { name: 'name_TR_EN', alias?: string  } 
  | { name: 'device_id', alias?: string  } 
  
export interface DeviceCreateManyWithoutTrInput {
  create?: DeviceCreateWithoutTrInput[]
  connect?: DeviceWhereUniqueInput[]
}
export type DeviceCreateManyWithoutTrInputInputObject =
  | Extract<keyof DeviceCreateManyWithoutTrInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DeviceCreateWithoutTrInput {
  id?: string | null
  published?: boolean | null
  name_EN?: string
  name_UA?: string
  name_RUS?: string
  category?: string
  module?: string | null
  author?: UserCreateOneWithoutDevicesInput
}
export type DeviceCreateWithoutTrInputInputObject =
  | Extract<keyof DeviceCreateWithoutTrInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'module', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface TRUpdateInput {
  name_TR_UA?: string | null
  name_TR_EN?: string | null
  device_id?: DeviceUpdateManyWithoutTrInput | null
}
export type TRUpdateInputInputObject =
  | Extract<keyof TRUpdateInput, string>
  | { name: 'name_TR_UA', alias?: string  } 
  | { name: 'name_TR_EN', alias?: string  } 
  | { name: 'device_id', alias?: string  } 
  
export interface DeviceUpdateManyWithoutTrInput {
  create?: DeviceCreateWithoutTrInput[]
  delete?: DeviceWhereUniqueInput[]
  connect?: DeviceWhereUniqueInput[]
  set?: DeviceWhereUniqueInput[]
  disconnect?: DeviceWhereUniqueInput[]
  update?: DeviceUpdateWithWhereUniqueWithoutTrInput[]
  upsert?: DeviceUpsertWithWhereUniqueWithoutTrInput[]
  deleteMany?: DeviceScalarWhereInput[]
  updateMany?: DeviceUpdateManyWithWhereNestedInput[]
}
export type DeviceUpdateManyWithoutTrInputInputObject =
  | Extract<keyof DeviceUpdateManyWithoutTrInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DeviceUpdateWithWhereUniqueWithoutTrInput {
  where?: DeviceWhereUniqueInput
  data?: DeviceUpdateWithoutTrDataInput
}
export type DeviceUpdateWithWhereUniqueWithoutTrInputInputObject =
  | Extract<keyof DeviceUpdateWithWhereUniqueWithoutTrInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DeviceUpdateWithoutTrDataInput {
  published?: boolean | null
  name_EN?: string | null
  name_UA?: string | null
  name_RUS?: string | null
  category?: string | null
  module?: string | null
  author?: UserUpdateOneRequiredWithoutDevicesInput | null
}
export type DeviceUpdateWithoutTrDataInputInputObject =
  | Extract<keyof DeviceUpdateWithoutTrDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'name_EN', alias?: string  } 
  | { name: 'name_UA', alias?: string  } 
  | { name: 'name_RUS', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'module', alias?: string  } 
  | { name: 'author', alias?: string  } 
  
export interface DeviceUpsertWithWhereUniqueWithoutTrInput {
  where?: DeviceWhereUniqueInput
  update?: DeviceUpdateWithoutTrDataInput
  create?: DeviceCreateWithoutTrInput
}
export type DeviceUpsertWithWhereUniqueWithoutTrInputInputObject =
  | Extract<keyof DeviceUpsertWithWhereUniqueWithoutTrInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TRUpdateManyMutationInput {
  name_TR_UA?: string | null
  name_TR_EN?: string | null
}
export type TRUpdateManyMutationInputInputObject =
  | Extract<keyof TRUpdateManyMutationInput, string>
  | { name: 'name_TR_UA', alias?: string  } 
  | { name: 'name_TR_EN', alias?: string  } 
  
export interface LetterEmailCreateInput {
  id?: string | null
  from?: string
  subject?: string
  text?: string
}
export type LetterEmailCreateInputInputObject =
  | Extract<keyof LetterEmailCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'from', alias?: string  } 
  | { name: 'subject', alias?: string  } 
  | { name: 'text', alias?: string  } 
  
export interface LetterEmailUpdateInput {
  from?: string | null
  subject?: string | null
  text?: string | null
}
export type LetterEmailUpdateInputInputObject =
  | Extract<keyof LetterEmailUpdateInput, string>
  | { name: 'from', alias?: string  } 
  | { name: 'subject', alias?: string  } 
  | { name: 'text', alias?: string  } 
  
export interface LetterEmailUpdateManyMutationInput {
  from?: string | null
  subject?: string | null
  text?: string | null
}
export type LetterEmailUpdateManyMutationInputInputObject =
  | Extract<keyof LetterEmailUpdateManyMutationInput, string>
  | { name: 'from', alias?: string  } 
  | { name: 'subject', alias?: string  } 
  | { name: 'text', alias?: string  } 
  
export interface PostSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PostWhereInput | null
  AND?: PostSubscriptionWhereInput[]
  OR?: PostSubscriptionWhereInput[]
  NOT?: PostSubscriptionWhereInput[]
}
export type PostSubscriptionWhereInputInputObject =
  | Extract<keyof PostSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DeviceSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DeviceWhereInput | null
  AND?: DeviceSubscriptionWhereInput[]
  OR?: DeviceSubscriptionWhereInput[]
  NOT?: DeviceSubscriptionWhereInput[]
}
export type DeviceSubscriptionWhereInputInputObject =
  | Extract<keyof DeviceSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TRSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TRWhereInput | null
  AND?: TRSubscriptionWhereInput[]
  OR?: TRSubscriptionWhereInput[]
  NOT?: TRSubscriptionWhereInput[]
}
export type TRSubscriptionWhereInputInputObject =
  | Extract<keyof TRSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LetterEmailSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LetterEmailWhereInput | null
  AND?: LetterEmailSubscriptionWhereInput[]
  OR?: LetterEmailSubscriptionWhereInput[]
  NOT?: LetterEmailSubscriptionWhereInput[]
}
export type LetterEmailSubscriptionWhereInputInputObject =
  | Extract<keyof LetterEmailSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type RoleValues =
  | 'ADMIN'
  | 'CUSTOMER'
  
export type PostOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'published_ASC'
  | 'published_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  
export type DeviceOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'published_ASC'
  | 'published_DESC'
  | 'name_EN_ASC'
  | 'name_EN_DESC'
  | 'name_UA_ASC'
  | 'name_UA_DESC'
  | 'name_RUS_ASC'
  | 'name_RUS_DESC'
  | 'category_ASC'
  | 'category_DESC'
  | 'module_ASC'
  | 'module_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'companyName_ASC'
  | 'companyName_DESC'
  | 'role_ASC'
  | 'role_DESC'
  | 'resetToken_ASC'
  | 'resetToken_DESC'
  | 'resetExpires_ASC'
  | 'resetExpires_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TROrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_TR_UA_ASC'
  | 'name_TR_UA_DESC'
  | 'name_TR_EN_ASC'
  | 'name_TR_EN_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type LetterEmailOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'from_ASC'
  | 'from_DESC'
  | 'subject_ASC'
  | 'subject_DESC'
  | 'text_ASC'
  | 'text_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  