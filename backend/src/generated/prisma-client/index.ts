// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  device: (where?: DeviceWhereInput) => Promise<boolean>;
  letterEmail: (where?: LetterEmailWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  tR: (where?: TRWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  device: (where: DeviceWhereUniqueInput) => DeviceNullablePromise;
  devices: (args?: {
    where?: DeviceWhereInput;
    orderBy?: DeviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Device>;
  devicesConnection: (args?: {
    where?: DeviceWhereInput;
    orderBy?: DeviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DeviceConnectionPromise;
  letterEmail: (
    where: LetterEmailWhereUniqueInput
  ) => LetterEmailNullablePromise;
  letterEmails: (args?: {
    where?: LetterEmailWhereInput;
    orderBy?: LetterEmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<LetterEmail>;
  letterEmailsConnection: (args?: {
    where?: LetterEmailWhereInput;
    orderBy?: LetterEmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => LetterEmailConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  tR: (where: TRWhereUniqueInput) => TRNullablePromise;
  tRs: (args?: {
    where?: TRWhereInput;
    orderBy?: TROrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TR>;
  tRsConnection: (args?: {
    where?: TRWhereInput;
    orderBy?: TROrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TRConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createDevice: (data: DeviceCreateInput) => DevicePromise;
  updateDevice: (args: {
    data: DeviceUpdateInput;
    where: DeviceWhereUniqueInput;
  }) => DevicePromise;
  updateManyDevices: (args: {
    data: DeviceUpdateManyMutationInput;
    where?: DeviceWhereInput;
  }) => BatchPayloadPromise;
  upsertDevice: (args: {
    where: DeviceWhereUniqueInput;
    create: DeviceCreateInput;
    update: DeviceUpdateInput;
  }) => DevicePromise;
  deleteDevice: (where: DeviceWhereUniqueInput) => DevicePromise;
  deleteManyDevices: (where?: DeviceWhereInput) => BatchPayloadPromise;
  createLetterEmail: (data: LetterEmailCreateInput) => LetterEmailPromise;
  updateLetterEmail: (args: {
    data: LetterEmailUpdateInput;
    where: LetterEmailWhereUniqueInput;
  }) => LetterEmailPromise;
  updateManyLetterEmails: (args: {
    data: LetterEmailUpdateManyMutationInput;
    where?: LetterEmailWhereInput;
  }) => BatchPayloadPromise;
  upsertLetterEmail: (args: {
    where: LetterEmailWhereUniqueInput;
    create: LetterEmailCreateInput;
    update: LetterEmailUpdateInput;
  }) => LetterEmailPromise;
  deleteLetterEmail: (where: LetterEmailWhereUniqueInput) => LetterEmailPromise;
  deleteManyLetterEmails: (
    where?: LetterEmailWhereInput
  ) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createTR: (data: TRCreateInput) => TRPromise;
  updateTR: (args: {
    data: TRUpdateInput;
    where: TRWhereUniqueInput;
  }) => TRPromise;
  updateManyTRs: (args: {
    data: TRUpdateManyMutationInput;
    where?: TRWhereInput;
  }) => BatchPayloadPromise;
  upsertTR: (args: {
    where: TRWhereUniqueInput;
    create: TRCreateInput;
    update: TRUpdateInput;
  }) => TRPromise;
  deleteTR: (where: TRWhereUniqueInput) => TRPromise;
  deleteManyTRs: (where?: TRWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  device: (
    where?: DeviceSubscriptionWhereInput
  ) => DeviceSubscriptionPayloadSubscription;
  letterEmail: (
    where?: LetterEmailSubscriptionWhereInput
  ) => LetterEmailSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  tR: (where?: TRSubscriptionWhereInput) => TRSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "CUSTOMER";

export type DeviceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "published_ASC"
  | "published_DESC"
  | "name_EN_ASC"
  | "name_EN_DESC"
  | "name_UA_ASC"
  | "name_UA_DESC"
  | "name_RUS_ASC"
  | "name_RUS_DESC"
  | "category_ASC"
  | "category_DESC"
  | "module_ASC"
  | "module_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "published_ASC"
  | "published_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC";

export type LetterEmailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "from_ASC"
  | "from_DESC"
  | "subject_ASC"
  | "subject_DESC"
  | "text_ASC"
  | "text_DESC";

export type TROrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_TR_UA_ASC"
  | "name_TR_UA_DESC"
  | "name_TR_EN_ASC"
  | "name_TR_EN_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "companyName_ASC"
  | "companyName_DESC"
  | "role_ASC"
  | "role_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetExpires_ASC"
  | "resetExpires_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DeviceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DeviceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  name_EN?: Maybe<String>;
  name_EN_not?: Maybe<String>;
  name_EN_in?: Maybe<String[] | String>;
  name_EN_not_in?: Maybe<String[] | String>;
  name_EN_lt?: Maybe<String>;
  name_EN_lte?: Maybe<String>;
  name_EN_gt?: Maybe<String>;
  name_EN_gte?: Maybe<String>;
  name_EN_contains?: Maybe<String>;
  name_EN_not_contains?: Maybe<String>;
  name_EN_starts_with?: Maybe<String>;
  name_EN_not_starts_with?: Maybe<String>;
  name_EN_ends_with?: Maybe<String>;
  name_EN_not_ends_with?: Maybe<String>;
  name_UA?: Maybe<String>;
  name_UA_not?: Maybe<String>;
  name_UA_in?: Maybe<String[] | String>;
  name_UA_not_in?: Maybe<String[] | String>;
  name_UA_lt?: Maybe<String>;
  name_UA_lte?: Maybe<String>;
  name_UA_gt?: Maybe<String>;
  name_UA_gte?: Maybe<String>;
  name_UA_contains?: Maybe<String>;
  name_UA_not_contains?: Maybe<String>;
  name_UA_starts_with?: Maybe<String>;
  name_UA_not_starts_with?: Maybe<String>;
  name_UA_ends_with?: Maybe<String>;
  name_UA_not_ends_with?: Maybe<String>;
  name_RUS?: Maybe<String>;
  name_RUS_not?: Maybe<String>;
  name_RUS_in?: Maybe<String[] | String>;
  name_RUS_not_in?: Maybe<String[] | String>;
  name_RUS_lt?: Maybe<String>;
  name_RUS_lte?: Maybe<String>;
  name_RUS_gt?: Maybe<String>;
  name_RUS_gte?: Maybe<String>;
  name_RUS_contains?: Maybe<String>;
  name_RUS_not_contains?: Maybe<String>;
  name_RUS_starts_with?: Maybe<String>;
  name_RUS_not_starts_with?: Maybe<String>;
  name_RUS_ends_with?: Maybe<String>;
  name_RUS_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  module?: Maybe<String>;
  module_not?: Maybe<String>;
  module_in?: Maybe<String[] | String>;
  module_not_in?: Maybe<String[] | String>;
  module_lt?: Maybe<String>;
  module_lte?: Maybe<String>;
  module_gt?: Maybe<String>;
  module_gte?: Maybe<String>;
  module_contains?: Maybe<String>;
  module_not_contains?: Maybe<String>;
  module_starts_with?: Maybe<String>;
  module_not_starts_with?: Maybe<String>;
  module_ends_with?: Maybe<String>;
  module_not_ends_with?: Maybe<String>;
  tr?: Maybe<TRWhereInput>;
  author?: Maybe<UserWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DeviceWhereInput[] | DeviceWhereInput>;
  OR?: Maybe<DeviceWhereInput[] | DeviceWhereInput>;
  NOT?: Maybe<DeviceWhereInput[] | DeviceWhereInput>;
}

export interface TRWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name_TR_UA?: Maybe<String>;
  name_TR_UA_not?: Maybe<String>;
  name_TR_UA_in?: Maybe<String[] | String>;
  name_TR_UA_not_in?: Maybe<String[] | String>;
  name_TR_UA_lt?: Maybe<String>;
  name_TR_UA_lte?: Maybe<String>;
  name_TR_UA_gt?: Maybe<String>;
  name_TR_UA_gte?: Maybe<String>;
  name_TR_UA_contains?: Maybe<String>;
  name_TR_UA_not_contains?: Maybe<String>;
  name_TR_UA_starts_with?: Maybe<String>;
  name_TR_UA_not_starts_with?: Maybe<String>;
  name_TR_UA_ends_with?: Maybe<String>;
  name_TR_UA_not_ends_with?: Maybe<String>;
  name_TR_EN?: Maybe<String>;
  name_TR_EN_not?: Maybe<String>;
  name_TR_EN_in?: Maybe<String[] | String>;
  name_TR_EN_not_in?: Maybe<String[] | String>;
  name_TR_EN_lt?: Maybe<String>;
  name_TR_EN_lte?: Maybe<String>;
  name_TR_EN_gt?: Maybe<String>;
  name_TR_EN_gte?: Maybe<String>;
  name_TR_EN_contains?: Maybe<String>;
  name_TR_EN_not_contains?: Maybe<String>;
  name_TR_EN_starts_with?: Maybe<String>;
  name_TR_EN_not_starts_with?: Maybe<String>;
  name_TR_EN_ends_with?: Maybe<String>;
  name_TR_EN_not_ends_with?: Maybe<String>;
  device_id_every?: Maybe<DeviceWhereInput>;
  device_id_some?: Maybe<DeviceWhereInput>;
  device_id_none?: Maybe<DeviceWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TRWhereInput[] | TRWhereInput>;
  OR?: Maybe<TRWhereInput[] | TRWhereInput>;
  NOT?: Maybe<TRWhereInput[] | TRWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  devices_every?: Maybe<DeviceWhereInput>;
  devices_some?: Maybe<DeviceWhereInput>;
  devices_none?: Maybe<DeviceWhereInput>;
  role?: Maybe<Role>;
  role_not?: Maybe<Role>;
  role_in?: Maybe<Role[] | Role>;
  role_not_in?: Maybe<Role[] | Role>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetExpires?: Maybe<DateTimeInput>;
  resetExpires_not?: Maybe<DateTimeInput>;
  resetExpires_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetExpires_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetExpires_lt?: Maybe<DateTimeInput>;
  resetExpires_lte?: Maybe<DateTimeInput>;
  resetExpires_gt?: Maybe<DateTimeInput>;
  resetExpires_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export type LetterEmailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface LetterEmailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  from?: Maybe<String>;
  from_not?: Maybe<String>;
  from_in?: Maybe<String[] | String>;
  from_not_in?: Maybe<String[] | String>;
  from_lt?: Maybe<String>;
  from_lte?: Maybe<String>;
  from_gt?: Maybe<String>;
  from_gte?: Maybe<String>;
  from_contains?: Maybe<String>;
  from_not_contains?: Maybe<String>;
  from_starts_with?: Maybe<String>;
  from_not_starts_with?: Maybe<String>;
  from_ends_with?: Maybe<String>;
  from_not_ends_with?: Maybe<String>;
  subject?: Maybe<String>;
  subject_not?: Maybe<String>;
  subject_in?: Maybe<String[] | String>;
  subject_not_in?: Maybe<String[] | String>;
  subject_lt?: Maybe<String>;
  subject_lte?: Maybe<String>;
  subject_gt?: Maybe<String>;
  subject_gte?: Maybe<String>;
  subject_contains?: Maybe<String>;
  subject_not_contains?: Maybe<String>;
  subject_starts_with?: Maybe<String>;
  subject_not_starts_with?: Maybe<String>;
  subject_ends_with?: Maybe<String>;
  subject_not_ends_with?: Maybe<String>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  AND?: Maybe<LetterEmailWhereInput[] | LetterEmailWhereInput>;
  OR?: Maybe<LetterEmailWhereInput[] | LetterEmailWhereInput>;
  NOT?: Maybe<LetterEmailWhereInput[] | LetterEmailWhereInput>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TRWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface DeviceCreateInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  name_EN: String;
  name_UA: String;
  name_RUS: String;
  category: String;
  module?: Maybe<String>;
  tr: TRCreateOneWithoutDevice_idInput;
  author: UserCreateOneWithoutDevicesInput;
}

export interface TRCreateOneWithoutDevice_idInput {
  create?: Maybe<TRCreateWithoutDevice_idInput>;
  connect?: Maybe<TRWhereUniqueInput>;
}

export interface TRCreateWithoutDevice_idInput {
  id?: Maybe<ID_Input>;
  name_TR_UA: String;
  name_TR_EN: String;
}

export interface UserCreateOneWithoutDevicesInput {
  create?: Maybe<UserCreateWithoutDevicesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutDevicesInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  companyName?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  role?: Maybe<Role>;
  resetToken?: Maybe<String>;
  resetExpires?: Maybe<DateTimeInput>;
}

export interface PostCreateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface PostCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  content: String;
}

export interface DeviceUpdateInput {
  published?: Maybe<Boolean>;
  name_EN?: Maybe<String>;
  name_UA?: Maybe<String>;
  name_RUS?: Maybe<String>;
  category?: Maybe<String>;
  module?: Maybe<String>;
  tr?: Maybe<TRUpdateOneRequiredWithoutDevice_idInput>;
  author?: Maybe<UserUpdateOneRequiredWithoutDevicesInput>;
}

export interface TRUpdateOneRequiredWithoutDevice_idInput {
  create?: Maybe<TRCreateWithoutDevice_idInput>;
  update?: Maybe<TRUpdateWithoutDevice_idDataInput>;
  upsert?: Maybe<TRUpsertWithoutDevice_idInput>;
  connect?: Maybe<TRWhereUniqueInput>;
}

export interface TRUpdateWithoutDevice_idDataInput {
  name_TR_UA?: Maybe<String>;
  name_TR_EN?: Maybe<String>;
}

export interface TRUpsertWithoutDevice_idInput {
  update: TRUpdateWithoutDevice_idDataInput;
  create: TRCreateWithoutDevice_idInput;
}

export interface UserUpdateOneRequiredWithoutDevicesInput {
  create?: Maybe<UserCreateWithoutDevicesInput>;
  update?: Maybe<UserUpdateWithoutDevicesDataInput>;
  upsert?: Maybe<UserUpsertWithoutDevicesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutDevicesDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  companyName?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  role?: Maybe<Role>;
  resetToken?: Maybe<String>;
  resetExpires?: Maybe<DateTimeInput>;
}

export interface PostUpdateManyWithoutAuthorInput {
  create?: Maybe<PostCreateWithoutAuthorInput[] | PostCreateWithoutAuthorInput>;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutAuthorInput[]
    | PostUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutAuthorInput[]
    | PostUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutAuthorDataInput;
}

export interface PostUpdateWithoutAuthorDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutAuthorDataInput;
  create: PostCreateWithoutAuthorInput;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface PostUpdateManyDataInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface UserUpsertWithoutDevicesInput {
  update: UserUpdateWithoutDevicesDataInput;
  create: UserCreateWithoutDevicesInput;
}

export interface DeviceUpdateManyMutationInput {
  published?: Maybe<Boolean>;
  name_EN?: Maybe<String>;
  name_UA?: Maybe<String>;
  name_RUS?: Maybe<String>;
  category?: Maybe<String>;
  module?: Maybe<String>;
}

export interface LetterEmailCreateInput {
  id?: Maybe<ID_Input>;
  from: String;
  subject: String;
  text: String;
}

export interface LetterEmailUpdateInput {
  from?: Maybe<String>;
  subject?: Maybe<String>;
  text?: Maybe<String>;
}

export interface LetterEmailUpdateManyMutationInput {
  from?: Maybe<String>;
  subject?: Maybe<String>;
  text?: Maybe<String>;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  title: String;
  content: String;
  author: UserCreateOneWithoutPostsInput;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  companyName?: Maybe<String>;
  devices?: Maybe<DeviceCreateManyWithoutAuthorInput>;
  role?: Maybe<Role>;
  resetToken?: Maybe<String>;
  resetExpires?: Maybe<DateTimeInput>;
}

export interface DeviceCreateManyWithoutAuthorInput {
  create?: Maybe<
    DeviceCreateWithoutAuthorInput[] | DeviceCreateWithoutAuthorInput
  >;
  connect?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
}

export interface DeviceCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  name_EN: String;
  name_UA: String;
  name_RUS: String;
  category: String;
  module?: Maybe<String>;
  tr: TRCreateOneWithoutDevice_idInput;
}

export interface PostUpdateInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPostsDataInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  companyName?: Maybe<String>;
  devices?: Maybe<DeviceUpdateManyWithoutAuthorInput>;
  role?: Maybe<Role>;
  resetToken?: Maybe<String>;
  resetExpires?: Maybe<DateTimeInput>;
}

export interface DeviceUpdateManyWithoutAuthorInput {
  create?: Maybe<
    DeviceCreateWithoutAuthorInput[] | DeviceCreateWithoutAuthorInput
  >;
  delete?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
  connect?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
  set?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
  disconnect?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
  update?: Maybe<
    | DeviceUpdateWithWhereUniqueWithoutAuthorInput[]
    | DeviceUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | DeviceUpsertWithWhereUniqueWithoutAuthorInput[]
    | DeviceUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<DeviceScalarWhereInput[] | DeviceScalarWhereInput>;
  updateMany?: Maybe<
    | DeviceUpdateManyWithWhereNestedInput[]
    | DeviceUpdateManyWithWhereNestedInput
  >;
}

export interface DeviceUpdateWithWhereUniqueWithoutAuthorInput {
  where: DeviceWhereUniqueInput;
  data: DeviceUpdateWithoutAuthorDataInput;
}

export interface DeviceUpdateWithoutAuthorDataInput {
  published?: Maybe<Boolean>;
  name_EN?: Maybe<String>;
  name_UA?: Maybe<String>;
  name_RUS?: Maybe<String>;
  category?: Maybe<String>;
  module?: Maybe<String>;
  tr?: Maybe<TRUpdateOneRequiredWithoutDevice_idInput>;
}

export interface DeviceUpsertWithWhereUniqueWithoutAuthorInput {
  where: DeviceWhereUniqueInput;
  update: DeviceUpdateWithoutAuthorDataInput;
  create: DeviceCreateWithoutAuthorInput;
}

export interface DeviceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  name_EN?: Maybe<String>;
  name_EN_not?: Maybe<String>;
  name_EN_in?: Maybe<String[] | String>;
  name_EN_not_in?: Maybe<String[] | String>;
  name_EN_lt?: Maybe<String>;
  name_EN_lte?: Maybe<String>;
  name_EN_gt?: Maybe<String>;
  name_EN_gte?: Maybe<String>;
  name_EN_contains?: Maybe<String>;
  name_EN_not_contains?: Maybe<String>;
  name_EN_starts_with?: Maybe<String>;
  name_EN_not_starts_with?: Maybe<String>;
  name_EN_ends_with?: Maybe<String>;
  name_EN_not_ends_with?: Maybe<String>;
  name_UA?: Maybe<String>;
  name_UA_not?: Maybe<String>;
  name_UA_in?: Maybe<String[] | String>;
  name_UA_not_in?: Maybe<String[] | String>;
  name_UA_lt?: Maybe<String>;
  name_UA_lte?: Maybe<String>;
  name_UA_gt?: Maybe<String>;
  name_UA_gte?: Maybe<String>;
  name_UA_contains?: Maybe<String>;
  name_UA_not_contains?: Maybe<String>;
  name_UA_starts_with?: Maybe<String>;
  name_UA_not_starts_with?: Maybe<String>;
  name_UA_ends_with?: Maybe<String>;
  name_UA_not_ends_with?: Maybe<String>;
  name_RUS?: Maybe<String>;
  name_RUS_not?: Maybe<String>;
  name_RUS_in?: Maybe<String[] | String>;
  name_RUS_not_in?: Maybe<String[] | String>;
  name_RUS_lt?: Maybe<String>;
  name_RUS_lte?: Maybe<String>;
  name_RUS_gt?: Maybe<String>;
  name_RUS_gte?: Maybe<String>;
  name_RUS_contains?: Maybe<String>;
  name_RUS_not_contains?: Maybe<String>;
  name_RUS_starts_with?: Maybe<String>;
  name_RUS_not_starts_with?: Maybe<String>;
  name_RUS_ends_with?: Maybe<String>;
  name_RUS_not_ends_with?: Maybe<String>;
  category?: Maybe<String>;
  category_not?: Maybe<String>;
  category_in?: Maybe<String[] | String>;
  category_not_in?: Maybe<String[] | String>;
  category_lt?: Maybe<String>;
  category_lte?: Maybe<String>;
  category_gt?: Maybe<String>;
  category_gte?: Maybe<String>;
  category_contains?: Maybe<String>;
  category_not_contains?: Maybe<String>;
  category_starts_with?: Maybe<String>;
  category_not_starts_with?: Maybe<String>;
  category_ends_with?: Maybe<String>;
  category_not_ends_with?: Maybe<String>;
  module?: Maybe<String>;
  module_not?: Maybe<String>;
  module_in?: Maybe<String[] | String>;
  module_not_in?: Maybe<String[] | String>;
  module_lt?: Maybe<String>;
  module_lte?: Maybe<String>;
  module_gt?: Maybe<String>;
  module_gte?: Maybe<String>;
  module_contains?: Maybe<String>;
  module_not_contains?: Maybe<String>;
  module_starts_with?: Maybe<String>;
  module_not_starts_with?: Maybe<String>;
  module_ends_with?: Maybe<String>;
  module_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DeviceScalarWhereInput[] | DeviceScalarWhereInput>;
  OR?: Maybe<DeviceScalarWhereInput[] | DeviceScalarWhereInput>;
  NOT?: Maybe<DeviceScalarWhereInput[] | DeviceScalarWhereInput>;
}

export interface DeviceUpdateManyWithWhereNestedInput {
  where: DeviceScalarWhereInput;
  data: DeviceUpdateManyDataInput;
}

export interface DeviceUpdateManyDataInput {
  published?: Maybe<Boolean>;
  name_EN?: Maybe<String>;
  name_UA?: Maybe<String>;
  name_RUS?: Maybe<String>;
  category?: Maybe<String>;
  module?: Maybe<String>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface PostUpdateManyMutationInput {
  published?: Maybe<Boolean>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface TRCreateInput {
  id?: Maybe<ID_Input>;
  name_TR_UA: String;
  name_TR_EN: String;
  device_id?: Maybe<DeviceCreateManyWithoutTrInput>;
}

export interface DeviceCreateManyWithoutTrInput {
  create?: Maybe<DeviceCreateWithoutTrInput[] | DeviceCreateWithoutTrInput>;
  connect?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
}

export interface DeviceCreateWithoutTrInput {
  id?: Maybe<ID_Input>;
  published?: Maybe<Boolean>;
  name_EN: String;
  name_UA: String;
  name_RUS: String;
  category: String;
  module?: Maybe<String>;
  author: UserCreateOneWithoutDevicesInput;
}

export interface TRUpdateInput {
  name_TR_UA?: Maybe<String>;
  name_TR_EN?: Maybe<String>;
  device_id?: Maybe<DeviceUpdateManyWithoutTrInput>;
}

export interface DeviceUpdateManyWithoutTrInput {
  create?: Maybe<DeviceCreateWithoutTrInput[] | DeviceCreateWithoutTrInput>;
  delete?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
  connect?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
  set?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
  disconnect?: Maybe<DeviceWhereUniqueInput[] | DeviceWhereUniqueInput>;
  update?: Maybe<
    | DeviceUpdateWithWhereUniqueWithoutTrInput[]
    | DeviceUpdateWithWhereUniqueWithoutTrInput
  >;
  upsert?: Maybe<
    | DeviceUpsertWithWhereUniqueWithoutTrInput[]
    | DeviceUpsertWithWhereUniqueWithoutTrInput
  >;
  deleteMany?: Maybe<DeviceScalarWhereInput[] | DeviceScalarWhereInput>;
  updateMany?: Maybe<
    | DeviceUpdateManyWithWhereNestedInput[]
    | DeviceUpdateManyWithWhereNestedInput
  >;
}

export interface DeviceUpdateWithWhereUniqueWithoutTrInput {
  where: DeviceWhereUniqueInput;
  data: DeviceUpdateWithoutTrDataInput;
}

export interface DeviceUpdateWithoutTrDataInput {
  published?: Maybe<Boolean>;
  name_EN?: Maybe<String>;
  name_UA?: Maybe<String>;
  name_RUS?: Maybe<String>;
  category?: Maybe<String>;
  module?: Maybe<String>;
  author?: Maybe<UserUpdateOneRequiredWithoutDevicesInput>;
}

export interface DeviceUpsertWithWhereUniqueWithoutTrInput {
  where: DeviceWhereUniqueInput;
  update: DeviceUpdateWithoutTrDataInput;
  create: DeviceCreateWithoutTrInput;
}

export interface TRUpdateManyMutationInput {
  name_TR_UA?: Maybe<String>;
  name_TR_EN?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  password: String;
  name: String;
  companyName?: Maybe<String>;
  posts?: Maybe<PostCreateManyWithoutAuthorInput>;
  devices?: Maybe<DeviceCreateManyWithoutAuthorInput>;
  role?: Maybe<Role>;
  resetToken?: Maybe<String>;
  resetExpires?: Maybe<DateTimeInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  companyName?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutAuthorInput>;
  devices?: Maybe<DeviceUpdateManyWithoutAuthorInput>;
  role?: Maybe<Role>;
  resetToken?: Maybe<String>;
  resetExpires?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  companyName?: Maybe<String>;
  role?: Maybe<Role>;
  resetToken?: Maybe<String>;
  resetExpires?: Maybe<DateTimeInput>;
}

export interface DeviceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DeviceWhereInput>;
  AND?: Maybe<DeviceSubscriptionWhereInput[] | DeviceSubscriptionWhereInput>;
  OR?: Maybe<DeviceSubscriptionWhereInput[] | DeviceSubscriptionWhereInput>;
  NOT?: Maybe<DeviceSubscriptionWhereInput[] | DeviceSubscriptionWhereInput>;
}

export interface LetterEmailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<LetterEmailWhereInput>;
  AND?: Maybe<
    LetterEmailSubscriptionWhereInput[] | LetterEmailSubscriptionWhereInput
  >;
  OR?: Maybe<
    LetterEmailSubscriptionWhereInput[] | LetterEmailSubscriptionWhereInput
  >;
  NOT?: Maybe<
    LetterEmailSubscriptionWhereInput[] | LetterEmailSubscriptionWhereInput
  >;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface TRSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TRWhereInput>;
  AND?: Maybe<TRSubscriptionWhereInput[] | TRSubscriptionWhereInput>;
  OR?: Maybe<TRSubscriptionWhereInput[] | TRSubscriptionWhereInput>;
  NOT?: Maybe<TRSubscriptionWhereInput[] | TRSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Device {
  id: ID_Output;
  published: Boolean;
  name_EN: String;
  name_UA: String;
  name_RUS: String;
  category: String;
  module?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DevicePromise extends Promise<Device>, Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  name_EN: () => Promise<String>;
  name_UA: () => Promise<String>;
  name_RUS: () => Promise<String>;
  category: () => Promise<String>;
  module: () => Promise<String>;
  tr: <T = TRPromise>() => T;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DeviceSubscription
  extends Promise<AsyncIterator<Device>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  name_EN: () => Promise<AsyncIterator<String>>;
  name_UA: () => Promise<AsyncIterator<String>>;
  name_RUS: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  module: () => Promise<AsyncIterator<String>>;
  tr: <T = TRSubscription>() => T;
  author: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DeviceNullablePromise
  extends Promise<Device | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  name_EN: () => Promise<String>;
  name_UA: () => Promise<String>;
  name_RUS: () => Promise<String>;
  category: () => Promise<String>;
  module: () => Promise<String>;
  tr: <T = TRPromise>() => T;
  author: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TR {
  id: ID_Output;
  name_TR_UA: String;
  name_TR_EN: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TRPromise extends Promise<TR>, Fragmentable {
  id: () => Promise<ID_Output>;
  name_TR_UA: () => Promise<String>;
  name_TR_EN: () => Promise<String>;
  device_id: <T = FragmentableArray<Device>>(args?: {
    where?: DeviceWhereInput;
    orderBy?: DeviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TRSubscription
  extends Promise<AsyncIterator<TR>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name_TR_UA: () => Promise<AsyncIterator<String>>;
  name_TR_EN: () => Promise<AsyncIterator<String>>;
  device_id: <T = Promise<AsyncIterator<DeviceSubscription>>>(args?: {
    where?: DeviceWhereInput;
    orderBy?: DeviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TRNullablePromise extends Promise<TR | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name_TR_UA: () => Promise<String>;
  name_TR_EN: () => Promise<String>;
  device_id: <T = FragmentableArray<Device>>(args?: {
    where?: DeviceWhereInput;
    orderBy?: DeviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  companyName?: String;
  role: Role;
  resetToken?: String;
  resetExpires?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  companyName: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  devices: <T = FragmentableArray<Device>>(args?: {
    where?: DeviceWhereInput;
    orderBy?: DeviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
  resetToken: () => Promise<String>;
  resetExpires: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  devices: <T = Promise<AsyncIterator<DeviceSubscription>>>(args?: {
    where?: DeviceWhereInput;
    orderBy?: DeviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AsyncIterator<Role>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetExpires: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  companyName: () => Promise<String>;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  devices: <T = FragmentableArray<Device>>(args?: {
    where?: DeviceWhereInput;
    orderBy?: DeviceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
  resetToken: () => Promise<String>;
  resetExpires: () => Promise<DateTimeOutput>;
}

export interface Post {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = UserSubscription>() => T;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  author: <T = UserPromise>() => T;
}

export interface DeviceConnection {
  pageInfo: PageInfo;
  edges: DeviceEdge[];
}

export interface DeviceConnectionPromise
  extends Promise<DeviceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DeviceEdge>>() => T;
  aggregate: <T = AggregateDevicePromise>() => T;
}

export interface DeviceConnectionSubscription
  extends Promise<AsyncIterator<DeviceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DeviceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDeviceSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DeviceEdge {
  node: Device;
  cursor: String;
}

export interface DeviceEdgePromise extends Promise<DeviceEdge>, Fragmentable {
  node: <T = DevicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface DeviceEdgeSubscription
  extends Promise<AsyncIterator<DeviceEdge>>,
    Fragmentable {
  node: <T = DeviceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDevice {
  count: Int;
}

export interface AggregateDevicePromise
  extends Promise<AggregateDevice>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDeviceSubscription
  extends Promise<AsyncIterator<AggregateDevice>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface LetterEmail {
  id: ID_Output;
  from: String;
  subject: String;
  text: String;
}

export interface LetterEmailPromise extends Promise<LetterEmail>, Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<String>;
  subject: () => Promise<String>;
  text: () => Promise<String>;
}

export interface LetterEmailSubscription
  extends Promise<AsyncIterator<LetterEmail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: () => Promise<AsyncIterator<String>>;
  subject: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface LetterEmailNullablePromise
  extends Promise<LetterEmail | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<String>;
  subject: () => Promise<String>;
  text: () => Promise<String>;
}

export interface LetterEmailConnection {
  pageInfo: PageInfo;
  edges: LetterEmailEdge[];
}

export interface LetterEmailConnectionPromise
  extends Promise<LetterEmailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<LetterEmailEdge>>() => T;
  aggregate: <T = AggregateLetterEmailPromise>() => T;
}

export interface LetterEmailConnectionSubscription
  extends Promise<AsyncIterator<LetterEmailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<LetterEmailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateLetterEmailSubscription>() => T;
}

export interface LetterEmailEdge {
  node: LetterEmail;
  cursor: String;
}

export interface LetterEmailEdgePromise
  extends Promise<LetterEmailEdge>,
    Fragmentable {
  node: <T = LetterEmailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface LetterEmailEdgeSubscription
  extends Promise<AsyncIterator<LetterEmailEdge>>,
    Fragmentable {
  node: <T = LetterEmailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateLetterEmail {
  count: Int;
}

export interface AggregateLetterEmailPromise
  extends Promise<AggregateLetterEmail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLetterEmailSubscription
  extends Promise<AsyncIterator<AggregateLetterEmail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TRConnection {
  pageInfo: PageInfo;
  edges: TREdge[];
}

export interface TRConnectionPromise
  extends Promise<TRConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TREdge>>() => T;
  aggregate: <T = AggregateTRPromise>() => T;
}

export interface TRConnectionSubscription
  extends Promise<AsyncIterator<TRConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TREdgeSubscription>>>() => T;
  aggregate: <T = AggregateTRSubscription>() => T;
}

export interface TREdge {
  node: TR;
  cursor: String;
}

export interface TREdgePromise extends Promise<TREdge>, Fragmentable {
  node: <T = TRPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TREdgeSubscription
  extends Promise<AsyncIterator<TREdge>>,
    Fragmentable {
  node: <T = TRSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTR {
  count: Int;
}

export interface AggregateTRPromise extends Promise<AggregateTR>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTRSubscription
  extends Promise<AsyncIterator<AggregateTR>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DeviceSubscriptionPayload {
  mutation: MutationType;
  node: Device;
  updatedFields: String[];
  previousValues: DevicePreviousValues;
}

export interface DeviceSubscriptionPayloadPromise
  extends Promise<DeviceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DevicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DevicePreviousValuesPromise>() => T;
}

export interface DeviceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DeviceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DeviceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DevicePreviousValuesSubscription>() => T;
}

export interface DevicePreviousValues {
  id: ID_Output;
  published: Boolean;
  name_EN: String;
  name_UA: String;
  name_RUS: String;
  category: String;
  module?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface DevicePreviousValuesPromise
  extends Promise<DevicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  published: () => Promise<Boolean>;
  name_EN: () => Promise<String>;
  name_UA: () => Promise<String>;
  name_RUS: () => Promise<String>;
  category: () => Promise<String>;
  module: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface DevicePreviousValuesSubscription
  extends Promise<AsyncIterator<DevicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  name_EN: () => Promise<AsyncIterator<String>>;
  name_UA: () => Promise<AsyncIterator<String>>;
  name_RUS: () => Promise<AsyncIterator<String>>;
  category: () => Promise<AsyncIterator<String>>;
  module: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LetterEmailSubscriptionPayload {
  mutation: MutationType;
  node: LetterEmail;
  updatedFields: String[];
  previousValues: LetterEmailPreviousValues;
}

export interface LetterEmailSubscriptionPayloadPromise
  extends Promise<LetterEmailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = LetterEmailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LetterEmailPreviousValuesPromise>() => T;
}

export interface LetterEmailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LetterEmailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LetterEmailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LetterEmailPreviousValuesSubscription>() => T;
}

export interface LetterEmailPreviousValues {
  id: ID_Output;
  from: String;
  subject: String;
  text: String;
}

export interface LetterEmailPreviousValuesPromise
  extends Promise<LetterEmailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  from: () => Promise<String>;
  subject: () => Promise<String>;
  text: () => Promise<String>;
}

export interface LetterEmailPreviousValuesSubscription
  extends Promise<AsyncIterator<LetterEmailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  from: () => Promise<AsyncIterator<String>>;
  subject: () => Promise<AsyncIterator<String>>;
  text: () => Promise<AsyncIterator<String>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface PostPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  published: Boolean;
  title: String;
  content: String;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  published: () => Promise<Boolean>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface TRSubscriptionPayload {
  mutation: MutationType;
  node: TR;
  updatedFields: String[];
  previousValues: TRPreviousValues;
}

export interface TRSubscriptionPayloadPromise
  extends Promise<TRSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TRPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TRPreviousValuesPromise>() => T;
}

export interface TRSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TRSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TRSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TRPreviousValuesSubscription>() => T;
}

export interface TRPreviousValues {
  id: ID_Output;
  name_TR_UA: String;
  name_TR_EN: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TRPreviousValuesPromise
  extends Promise<TRPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name_TR_UA: () => Promise<String>;
  name_TR_EN: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TRPreviousValuesSubscription
  extends Promise<AsyncIterator<TRPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name_TR_UA: () => Promise<AsyncIterator<String>>;
  name_TR_EN: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  name: String;
  companyName?: String;
  role: Role;
  resetToken?: String;
  resetExpires?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  companyName: () => Promise<String>;
  role: () => Promise<Role>;
  resetToken: () => Promise<String>;
  resetExpires: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  companyName: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetExpires: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Device",
    embedded: false
  },
  {
    name: "TR",
    embedded: false
  },
  {
    name: "LetterEmail",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://eu1.prisma.sh/public-lightfright-56/backend/dev`
});
export const prisma = new Prisma();
